{
	"title": "Python3 迭代器与生成器 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python3-iterator-generator.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\nPython3 基础语法\nPython3 基本数据类型\nPython3 数据类型转换\nPython3 解释器\nPython3 注释\nPython3 运算符\nPython3 数字(Number)\nPython3 字符串\nPython3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\n Python3 迭代器与生成器\nPython3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\nPython3 命名空间/作用域\nPython3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\nPython3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\nPython3 XML 解析\nPython3 JSON\nPython3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python3 推导式\nPython3 函数 \nPython3 迭代器与生成器\n迭代器\n\n迭代是 Python 最强大的功能之一，是访问集合元素的一种方式。\n\n迭代器是一个可以记住遍历的位置的对象。\n\n迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。\n\n迭代器有两个基本的方法：iter() 和 next()。\n\n字符串，列表或元组对象都可用于创建迭代器：\n\n实例(Python 3.0+)\n>>> list=[1,2,3,4]\n>>> it = iter(list)    # 创建迭代器对象\n>>> print (next(it))   # 输出迭代器的下一个元素\n1\n>>> print (next(it))\n2\n>>>\n\n\n迭代器对象可以使用常规for语句进行遍历：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nlist=[1,2,3,4]\nit = iter(list)    # 创建迭代器对象\nfor x in it:\n    print (x, end=\" \")\n\n执行以上程序，输出结果如下：\n\n1 2 3 4\n\n也可以使用 next() 函数：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nimport sys         # 引入 sys 模块\n \nlist=[1,2,3,4]\nit = iter(list)    # 创建迭代器对象\n \nwhile True:\n    try:\n        print (next(it))\n    except StopIteration:\n        sys.exit()\n\n执行以上程序，输出结果如下：\n\n1\n2\n3\n4\n创建一个迭代器\n\n把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__() 与 __next__() 。\n\n如果你已经了解的面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 __init__(), 它会在对象初始化的时候执行。\n\n更多内容查阅：Python3 面向对象\n\n__iter__() 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 __next__() 方法并通过 StopIteration 异常标识迭代的完成。\n\n__next__() 方法（Python 2 里是 next()）会返回下一个迭代器对象。\n\n创建一个返回数字的迭代器，初始值为 1，逐步递增 1：\n\n实例(Python 3.0+)\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n \n  def __next__(self):\n    x = self.a\n    self.a += 1\n    return x\n \nmyclass = MyNumbers()\nmyiter = iter(myclass)\n \nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\n\n执行输出结果为：\n\n1\n2\n3\n4\n5\nStopIteration\n\nStopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 __next__() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。\n\n在 20 次迭代后停止执行：\n\n实例(Python 3.0+)\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n \n  def __next__(self):\n    if self.a <= 20:\n      x = self.a\n      self.a += 1\n      return x\n    else:\n      raise StopIteration\n \nmyclass = MyNumbers()\nmyiter = iter(myclass)\n \nfor x in myiter:\n  print(x)\n\n执行输出结果为：\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n生成器\n\n在 Python 中，使用了 yield 的函数被称为生成器（generator）。\n\nyield 是一个关键字，用于定义生成器函数，生成器函数是一种特殊的函数，可以在迭代过程中逐步产生值，而不是一次性返回所有结果。\n\n跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。\n\n当在生成器函数中使用 yield 语句时，函数的执行将会暂停，并将 yield 后面的表达式作为当前迭代的值返回。\n\n然后，每次调用生成器的 next() 方法或使用 for 循环进行迭代时，函数会从上次暂停的地方继续执行，直到再次遇到 yield 语句。这样，生成器函数可以逐步产生值，而不需要一次性计算并返回所有结果。\n\n调用一个生成器函数，返回的是一个迭代器对象。\n\n下面是一个简单的示例，展示了生成器函数的使用：\n\n实例\ndef countdown(n):\n    while n > 0:\n        yield n\n        n -= 1\n \n# 创建生成器对象\ngenerator = countdown(5)\n \n# 通过迭代生成器获取值\nprint(next(generator))  # 输出: 5\nprint(next(generator))  # 输出: 4\nprint(next(generator))  # 输出: 3\n \n# 使用 for 循环迭代生成器\nfor value in generator:\n    print(value)  # 输出: 2 1\n\n以上实例中，countdown 函数是一个生成器函数。它使用 yield 语句逐步产生从 n 到 1 的倒数数字。在每次调用 yield 语句时，函数会返回当前的倒数值，并在下一次调用时从上次暂停的地方继续执行。\n\n通过创建生成器对象并使用 next() 函数或 for 循环迭代生成器，我们可以逐步获取生成器函数产生的值。在这个例子中，我们首先使用 next() 函数获取前三个倒数值，然后通过 for 循环获取剩下的两个倒数值。\n\n生成器函数的优势是它们可以按需生成值，避免一次性生成大量数据并占用大量内存。此外，生成器还可以与其他迭代工具（如for循环）无缝配合使用，提供简洁和高效的迭代方式。\n\n执行以上程序，输出结果如下：\n\n5\n4\n3\n2\n1\n\n以下实例使用 yield 实现斐波那契数列：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nimport sys\n \ndef fibonacci(n): # 生成器函数 - 斐波那契\n    a, b, counter = 0, 1, 0\n    while True:\n        if (counter > n): \n            return\n        yield a\n        a, b = b, a + b\n        counter += 1\nf = fibonacci(10) # f 是一个迭代器，由生成器返回生成\n \nwhile True:\n    try:\n        print (next(f), end=\" \")\n    except StopIteration:\n        sys.exit()\n\n执行以上程序，输出结果如下：\n\n0 1 1 2 3 5 8 13 21 34 55\n Python3 推导式\nPython3 函数 \n10 篇笔记\n 写笔记\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}