{
	"title": "Python3 数据类型转换 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python3-type-conversion.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\nPython3 基础语法\nPython3 基本数据类型\n Python3 数据类型转换\nPython3 解释器\nPython3 注释\nPython3 运算符\nPython3 数字(Number)\nPython3 字符串\nPython3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\nPython3 迭代器与生成器\nPython3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\nPython3 命名空间/作用域\nPython3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\nPython3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\nPython3 XML 解析\nPython3 JSON\nPython3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python3 基本数据类型\nPython3 解释器 \nPython3 数据类型转换\n\n有时候，我们需要对数据内置的类型进行转换，数据类型的转换，一般情况下你只需要将数据类型作为函数名即可。\n\nPython 数据类型转换可以分为两种：\n\n隐式类型转换 - 自动完成\n显式类型转换 - 需要使用类型函数来转换\n隐式类型转换\n\n在隐式类型转换中，Python 会自动将一种数据类型转换为另一种数据类型，不需要我们去干预。\n\n以下实例中，我们对两种不同类型的数据进行运算，较低数据类型（整数）就会转换为较高数据类型（浮点数）以避免数据丢失。\n\n实例\nnum_int = 123\nnum_flo = 1.23\n\nnum_new = num_int + num_flo\n\nprint(\"num_int 数据类型为:\",type(num_int))\nprint(\"num_flo 数据类型为:\",type(num_flo))\n\nprint(\"num_new 值为:\",num_new)\nprint(\"num_new 数据类型为:\",type(num_new))\n\n\n以上实例输出结果为：\n\nnum_int 数据类型为: <class 'int'>\nnum_flo 数据类型为: <class 'float'>\nnum_new: 值为: 124.23\nnum_new 数据类型为: <class 'float'>\n\n代码解析：\n\n实例中我们对两个不同数据类型的变量 num_int 和 num_flo 进行相加运算，并存储在变量 num_new 中。\n然后查看三个变量的数据类型。\n在输出结果中，我们看到 num_int 是 整型（integer） ， num_flo 是 浮点型（float）。\n同样，新的变量 num_new 是 浮点型（float），这是因为 Python 会将较小的数据类型转换为较大的数据类型，以避免数据丢失。\n\n我们再看一个实例，整型数据与字符串类型的数据进行相加：\n\n实例\nnum_int = 123\nnum_str = \"456\"\n\nprint(\"num_int 数据类型为:\",type(num_int))\nprint(\"num_str 数据类型为:\",type(num_str))\n\nprint(num_int+num_str)\n\n\n以上实例输出结果为：\n\nnum_int 数据类型为: <class 'int'>\nnum_str 数据类型为: <class 'str'>\nTraceback (most recent call last):\n  File \"/runoob-test/test.py\", line 7, in <module>\n    print(num_int+num_str)\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n从输出中可以看出，整型和字符串类型运算结果会报错，输出 TypeError。 Python 在这种情况下无法使用隐式转换。\n\n但是，Python 为这些类型的情况提供了一种解决方案，称为显式转换。\n\n显式类型转换\n\n在显式类型转换中，用户将对象的数据类型转换为所需的数据类型。 我们使用 int()、float()、str() 等预定义函数来执行显式类型转换。\n\nint() 强制转换为整型：\n\n实例\nx = int(1)   # x 输出结果为 1\ny = int(2.8) # y 输出结果为 2\nz = int(\"3\") # z 输出结果为 3\n\n\nfloat() 强制转换为浮点型：\n\n实例\nx = float(1)     # x 输出结果为 1.0\ny = float(2.8)   # y 输出结果为 2.8\nz = float(\"3\")   # z 输出结果为 3.0\nw = float(\"4.2\") # w 输出结果为 4.2\n\n\nstr() 强制转换为字符串类型：\n\n实例\nx = str(\"s1\") # x 输出结果为 's1'\ny = str(2)    # y 输出结果为 '2'\nz = str(3.0)  # z 输出结果为 '3.0'\n\n\n整型和字符串类型进行运算，就可以用强制类型转换来完成：\n\n实例\nnum_int = 123\nnum_str = \"456\"\n\nprint(\"num_int 数据类型为:\",type(num_int))\nprint(\"类型转换前，num_str 数据类型为:\",type(num_str))\n\nnum_str = int(num_str)    # 强制转换为整型\nprint(\"类型转换后，num_str 数据类型为:\",type(num_str))\n\nnum_sum = num_int + num_str\n\nprint(\"num_int 与 num_str 相加结果为:\",num_sum)\nprint(\"sum 数据类型为:\",type(num_sum))\n\n\n以上实例输出结果为：\n\nnum_int 数据类型为: <class 'int'>\n类型转换前，num_str 数据类型为: <class 'str'>\n类型转换后，num_str 数据类型为: <class 'int'>\nnum_int 与 num_str 相加结果为: 579\nsum 数据类型为: <class 'int'>\n\n以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。\n\n函数\t描述\n\n\nint(x [,base])\n\n\t\n\n将x转换为一个整数\n\n\n\n\nfloat(x)\n\n\t\n\n将x转换到一个浮点数\n\n\n\n\ncomplex(real [,imag])\n\n\t\n\n创建一个复数\n\n\n\n\nstr(x)\n\n\t\n\n将对象 x 转换为字符串\n\n\n\n\nrepr(x)\n\n\t\n\n将对象 x 转换为表达式字符串\n\n\n\n\neval(str)\n\n\t\n\n用来计算在字符串中的有效Python表达式,并返回一个对象\n\n\n\n\ntuple(s)\n\n\t\n\n将序列 s 转换为一个元组\n\n\n\n\nlist(s)\n\n\t\n\n将序列 s 转换为一个列表\n\n\n\n\nset(s)\n\n\t\n\n转换为可变集合\n\n\n\n\ndict(d)\n\n\t\n\n创建一个字典。d 必须是一个 (key, value)元组序列。\n\n\n\n\nfrozenset(s)\n\n\t\n\n转换为不可变集合\n\n\n\n\nchr(x)\n\n\t\n\n将一个整数转换为一个字符\n\n\n\n\nord(x)\n\n\t\n\n将一个字符转换为它的整数值\n\n\n\n\nhex(x)\n\n\t\n\n将一个整数转换为一个十六进制字符串\n\n\n\n\noct(x)\n\n\t\n\n将一个整数转换为一个八进制字符串\n\n Python3 基本数据类型\nPython3 解释器 \n1 篇笔记\n 写笔记\n\n   wallacenzyme\n\n  wan***izhi990625@gmail.com\n\n242\n\n数据类型的高低之分：\n\n\"较高数据类型\"和\"较低数据类型\"是在隐式类型转换中用于描述数据精度的概念。精度可以理解为数据类型能够表示的信息量或详细程度。在Python中，数据类型的\"高\"和\"低\"主要根据它们的精度来判断。\n\n这里的\"较高\"数据类型指的是能够表示更多信息（或更精确信息）的数据类型，而\"较低\"的数据类型则表示的信息较少。具体来说，比如浮点数就比整数\"高\"，因为浮点数不仅可以表示整数，还可以表示小数。所以在你的例子中，整数就会被自动转换为浮点数，以保证信息不丢失。\n\n再比如，复数（complex）就比浮点数（float）和整数（int）\"高\"，因为复数可以表示实数和虚数，而浮点数和整数只能表示实数。所以在进行运算时，如果操作数包含复数，那么其他的浮点数或整数就会被转换为复数。\n\n通常情况下，Python的数据类型的\"高低\"可以按照如下顺序理解：布尔（bool）< 整型（int） < 浮点型（float）< 复数（complex）。这个顺序主要根据数据类型可以表示的信息范围和精度来确定的。\n\n不同数据类型之间能否随意转化：\n\n虽然Python提供了一些内置的函数来实现不同数据类型之间的转换，如int(), float(), str(), list(), tuple(), set()等等，但并非所有类型的数据都可以被转换成其他任意类型。转换是否可行，主要取决于数据本身是否包含足够的信息来表示目标类型。\n\n例如：\n\n你可以轻松地将整数转换为字符串，因为每一个整数都有一个明确的字符串表示（例如，整数123可以表示为字符串\"123\"）。\n类似地，一个只包含数字字符的字符串（如\"123\"）可以被转换为一个整数或浮点数，因为这个字符串中包含了足够的信息来表示一个数字。\n\n然而：\n\n对于一个非数字字符串（如\"Hello\"），它无法被转换为一个整数或浮点数，因为这个字符串并不包含任何可以表示一个数字的信息。\n对于一个列表或元组，它可以被转换为一个集合（如果它的元素是不可变的），但不能被转换为一个整数，因为一个集合或列表中的元素无法合理地表示为一个单独的数字。\n\n总的来说，数据类型的转换并非无限制，它取决于原始数据是否能够提供足够的信息来表示目标类型。当你在编程中进行类型转换时，需要注意这一点。\n\nwallacenzyme\n\n   wallacenzyme\n\n  wan***izhi990625@gmail.com\n\n6个月前 (06-09)\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}