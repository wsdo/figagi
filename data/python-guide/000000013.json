{
	"title": "Python3 列表 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python3-list.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\nPython3 基础语法\nPython3 基本数据类型\nPython3 数据类型转换\nPython3 解释器\nPython3 注释\nPython3 运算符\nPython3 数字(Number)\nPython3 字符串\n Python3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\nPython3 迭代器与生成器\nPython3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\nPython3 命名空间/作用域\nPython3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\nPython3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\nPython3 XML 解析\nPython3 JSON\nPython3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python3 字符串\nPython3 元组 \nPython3 列表\n\n序列是 Python 中最基本的数据结构。\n\n序列中的每个值都有对应的位置值，称之为索引，第一个索引是 0，第二个索引是 1，依此类推。\n\nPython 有 6 个序列的内置类型，但最常见的是列表和元组。\n\n列表都可以进行的操作包括索引，切片，加，乘，检查成员。\n\n此外，Python 已经内置确定序列的长度以及确定最大和最小的元素的方法。\n\n列表是最常用的 Python 数据类型，它可以作为一个方括号内的逗号分隔值出现。\n\n列表的数据项不需要具有相同的类型\n\n创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：\n\nlist1 = ['Google', 'Runoob', 1997, 2000]\nlist2 = [1, 2, 3, 4, 5 ]\nlist3 = [\"a\", \"b\", \"c\", \"d\"]\nlist4 = ['red', 'green', 'blue', 'yellow', 'white', 'black']\n访问列表中的值\n\n与字符串的索引一样，列表索引从 0 开始，第二个索引是 1，依此类推。\n\n通过索引列表可以进行截取、组合等操作。\n\n实例\n#!/usr/bin/python3\n\nlist = ['red', 'green', 'blue', 'yellow', 'white', 'black']\nprint( list[0] )\nprint( list[1] )\nprint( list[2] )\n\n\n以上实例输出结果：\n\nred\ngreen\nblue\n\n索引也可以从尾部开始，最后一个元素的索引为 -1，往前一位为 -2，以此类推。\n\n实例\n#!/usr/bin/python3\n\nlist = ['red', 'green', 'blue', 'yellow', 'white', 'black']\nprint( list[-1] )\nprint( list[-2] )\nprint( list[-3] )\n\n\n以上实例输出结果：\n\nblack\nwhite\nyellow\n\n使用下标索引来访问列表中的值，同样你也可以使用方括号 [] 的形式截取字符，如下所示：\n\n实例\n#!/usr/bin/python3\n\nnums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nprint(nums[0:4])\n\n\n以上实例输出结果：\n\n[10, 20, 30, 40]\n\n使用负数索引值截取：\n\n实例\n#!/usr/bin/python3\n \nlist = ['Google', 'Runoob', \"Zhihu\", \"Taobao\", \"Wiki\"]\n \n# 读取第二位\nprint (\"list[1]: \", list[1])\n# 从第二位开始（包含）截取到倒数第二位（不包含）\nprint (\"list[1:-2]: \", list[1:-2])\n\n以上实例输出结果：\n\nlist[1]:  Runoob\nlist[1:-2]:  ['Runoob', 'Zhihu']\n更新列表\n\n你可以对列表的数据项进行修改或更新，你也可以使用 append() 方法来添加列表项，如下所示：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nlist = ['Google', 'Runoob', 1997, 2000]\n \nprint (\"第三个元素为 : \", list[2])\nlist[2] = 2001\nprint (\"更新后的第三个元素为 : \", list[2])\n \nlist1 = ['Google', 'Runoob', 'Taobao']\nlist1.append('Baidu')\nprint (\"更新后的列表 : \", list1)\n\n注意：我们会在接下来的章节讨论 append() 方法的使用。\n\n以上实例输出结果：\n\n第三个元素为 :  1997\n更新后的第三个元素为 :  2001\n更新后的列表 :  ['Google', 'Runoob', 'Taobao', 'Baidu']\n删除列表元素\n\n可以使用 del 语句来删除列表的的元素，如下实例：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nlist = ['Google', 'Runoob', 1997, 2000]\n \nprint (\"原始列表 : \", list)\ndel list[2]\nprint (\"删除第三个元素 : \", list)\n\n以上实例输出结果：\n\n原始列表 :  ['Google', 'Runoob', 1997, 2000]\n删除第三个元素 :  ['Google', 'Runoob', 2000]\n\n注意：我们会在接下来的章节讨论 remove() 方法的使用\n\nPython列表脚本操作符\n\n列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。\n\n如下所示：\n\nPython 表达式\t结果\t描述\nlen([1, 2, 3])\t3\t长度\n[1, 2, 3] + [4, 5, 6]\t[1, 2, 3, 4, 5, 6]\t组合\n['Hi!'] * 4\t['Hi!', 'Hi!', 'Hi!', 'Hi!']\t重复\n3 in [1, 2, 3]\tTrue\t元素是否存在于列表中\nfor x in [1, 2, 3]: print(x, end=\" \")\t1 2 3\t迭代\nPython 列表截取与拼接\n\nPython 的列表截取与字符串操作类似，如下所示：\n\nL=['Google', 'Runoob', 'Taobao']\n\n操作：\n\nPython 表达式\t结果\t描述\nL[2]\t'Taobao'\t读取第三个元素\nL[-2]\t'Runoob'\t从右侧开始读取倒数第二个元素: count from the right\nL[1:]\t['Runoob', 'Taobao']\t输出从第二个元素开始后的所有元素\n>>>L=['Google', 'Runoob', 'Taobao']\n>>> L[2]\n'Taobao'\n>>> L[-2]\n'Runoob'\n>>> L[1:]\n['Runoob', 'Taobao']\n>>>\n\n列表还支持拼接操作：\n\n>>>squares = [1, 4, 9, 16, 25]\n>>> squares += [36, 49, 64, 81, 100]\n>>> squares\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n>>>\n嵌套列表\n\n使用嵌套列表即在列表里创建其它列表，例如：\n\n>>>a = ['a', 'b', 'c']\n>>> n = [1, 2, 3]\n>>> x = [a, n]\n>>> x\n[['a', 'b', 'c'], [1, 2, 3]]\n>>> x[0]\n['a', 'b', 'c']\n>>> x[0][1]\n'b'\n列表比较\n\n列表比较需要引入 operator 模块的 eq 方法（详见：Python operator 模块）：\n\n实例\n# 导入 operator 模块\nimport operator\n\na = [1, 2]\nb = [2, 3]\nc = [2, 3]\nprint(\"operator.eq(a,b): \", operator.eq(a,b))\nprint(\"operator.eq(c,b): \", operator.eq(c,b))\n\n\n以上代码输出结果为：\n\noperator.eq(a,b):  False\noperator.eq(c,b):  True\nPython列表函数&方法\n\nPython包含以下函数:\n\n序号\t函数\n1\tlen(list)\n列表元素个数\n2\tmax(list)\n返回列表元素最大值\n3\tmin(list)\n返回列表元素最小值\n4\tlist(seq)\n将元组转换为列表\n\nPython包含以下方法:\n\n序号\t方法\n1\tlist.append(obj)\n在列表末尾添加新的对象\n2\tlist.count(obj)\n统计某个元素在列表中出现的次数\n3\tlist.extend(seq)\n在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\n4\tlist.index(obj)\n从列表中找出某个值第一个匹配项的索引位置\n5\tlist.insert(index, obj)\n将对象插入列表\n6\tlist.pop([index=-1])\n移除列表中的一个元素（默认最后一个元素），并且返回该元素的值\n7\tlist.remove(obj)\n移除列表中某个值的第一个匹配项\n8\tlist.reverse()\n反向列表中元素\n9\tlist.sort( key=None, reverse=False)\n对原列表进行排序\n10\tlist.clear()\n清空列表\n11\tlist.copy()\n复制列表\n Python3 字符串\nPython3 元组 \n14 篇笔记\n 写笔记\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}