{
	"title": "Python3 基础语法 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python3-basic-syntax.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\n Python3 基础语法\nPython3 基本数据类型\nPython3 数据类型转换\nPython3 解释器\nPython3 注释\nPython3 运算符\nPython3 数字(Number)\nPython3 字符串\nPython3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\nPython3 迭代器与生成器\nPython3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\nPython3 命名空间/作用域\nPython3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\nPython3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\nPython3 XML 解析\nPython3 JSON\nPython3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python3 VScode\nPython3 基本数据类型 \nPython3 基础语法\n编码\n\n默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。 当然你也可以为源码文件指定不同的编码：\n\n# -*- coding: cp-1252 -*-\n\n上述定义允许在源文件中使用 Windows-1252 字符集中的字符编码，对应适合语言为保加利亚语、白俄罗斯语、马其顿语、俄语、塞尔维亚语。\n\n标识符\n第一个字符必须是字母表中字母或下划线 _ 。\n标识符的其他的部分由字母、数字和下划线组成。\n标识符对大小写敏感。\n\n在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。\n\npython保留字\n\n保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：\n\n>>> import keyword\n>>> keyword.kwlist\n['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n注释\n\nPython中单行注释以 # 开头，实例如下：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \n# 第一个注释\nprint (\"Hello, Python!\") # 第二个注释\n\n执行以上代码，输出结果为：\n\nHello, Python!\n\n多行注释可以用多个 # 号，还有 ''' 和 \"\"\"：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \n# 第一个注释\n# 第二个注释\n \n'''\n第三注释\n第四注释\n'''\n \n\"\"\"\n第五注释\n第六注释\n\"\"\"\nprint (\"Hello, Python!\")\n\n执行以上代码，输出结果为：\n\nHello, Python!\n行与缩进\n\npython最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。\n\n缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：\n\n实例(Python 3.0+)\nif True:\n    print (\"True\")\nelse:\n    print (\"False\")\n\n以下代码最后一行语句缩进数的空格数不一致，会导致运行错误：\n\n实例\nif True:\n    print (\"Answer\")\n    print (\"True\")\nelse:\n    print (\"Answer\")\n  print (\"False\")    # 缩进不一致，会导致运行错误\n\n\n以上程序由于缩进不一致，执行后会出现类似以下错误：\n\n File \"test.py\", line 6\n    print (\"False\")    # 缩进不一致，会导致运行错误\n                                      ^\nIndentationError: unindent does not match any outer indentation level\n多行语句\n\nPython 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 \\ 来实现多行语句，例如：\n\ntotal = item_one + \\\n        item_two + \\\n        item_three\n\n在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 \\，例如：\n\ntotal = ['item_one', 'item_two', 'item_three',\n        'item_four', 'item_five']\n数字(Number)类型\n\npython中数字有四种类型：整数、布尔型、浮点数和复数。\n\nint (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。\nbool (布尔), 如 True。\nfloat (浮点数), 如 1.23、3E-2\ncomplex (复数), 如 1 + 2j、 1.1 + 2.2j\n字符串(String)\nPython 中单引号 ' 和双引号 \" 使用完全相同。\n使用三引号(''' 或 \"\"\")可以指定一个多行字符串。\n转义符 \\。\n反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。 如 r\"this is a line with \\n\" 则 \\n 会显示，并不是换行。\n按字面意义级联字符串，如 \"this \" \"is \" \"string\" 会被自动转换为 this is string。\n字符串可以用 + 运算符连接在一起，用 * 运算符重复。\nPython 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。\nPython 中的字符串不能改变。\nPython 没有单独的字符类型，一个字符就是长度为 1 的字符串。\n字符串的截取的语法格式如下：变量[头下标:尾下标:步长]\nword = '字符串'\nsentence = \"这是一个句子。\"\nparagraph = \"\"\"这是一个段落，\n可以由多行组成\"\"\"\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nstr='123456789'\n \nprint(str)                 # 输出字符串\nprint(str[0:-1])           # 输出第一个到倒数第二个的所有字符\nprint(str[0])              # 输出字符串第一个字符\nprint(str[2:5])            # 输出从第三个开始到第六个的字符（不包含）\nprint(str[2:])             # 输出从第三个开始后的所有字符\nprint(str[1:5:2])          # 输出从第二个开始到第五个且每隔一个的字符（步长为2）\nprint(str * 2)             # 输出字符串两次\nprint(str + '你好')         # 连接字符串\n \nprint('------------------------------')\n \nprint('hello\\nrunoob')      # 使用反斜杠(\\)+n转义特殊字符\nprint(r'hello\\nrunoob')     # 在字符串前面添加一个 r，表示原始字符串，不会发生转义\n\n这里的 r 指 raw，即 raw string，会自动将反斜杠转义，例如：\n\n>>> print('\\n')       # 输出空行\n\n>>> print(r'\\n')      # 输出 \\n\n\\n\n>>>\n\n以上实例输出结果：\n\n123456789\n12345678\n1\n345\n3456789\n24\n123456789123456789\n123456789你好\n------------------------------\nhello\nrunoob\nhello\\nrunoob\n空行\n\n函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。\n\n空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。\n\n记住：空行也是程序代码的一部分。\n\n等待用户输入\n\n执行下面的程序在按回车键后就会等待用户输入：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \ninput(\"\\n\\n按下 enter 键后退出。\")\n\n以上代码中 ，\\n\\n 在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。\n\n同一行显示多条语句\n\nPython 可以在同一行中使用多条语句，语句之间使用分号 ; 分割，以下是一个简单的实例：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nimport sys; x = 'runoob'; sys.stdout.write(x + '\\n')\n\n使用脚本执行以上代码，输出结果为：\n\nrunoob\n\n使用交互式命令行执行，输出结果为：\n\n>>> import sys; x = 'runoob'; sys.stdout.write(x + '\\n')\nrunoob\n7\n\n此处的 7 表示字符数，runoob 有 6 个字符，\\n 表示一个字符，加起来 7 个字符。\n\n>>> import sys\n>>> sys.stdout.write(\" hi \")    # hi 前后各有 1 个空格\n hi 4\n多个语句构成代码组\n\n缩进相同的一组语句构成一个代码块，我们称之代码组。\n\n像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。\n\n我们将首行及后面的代码组称为一个子句(clause)。\n\n如下实例：\n\nif expression : \n   suite\nelif expression : \n   suite \nelse : \n   suite\nprint 输出\n\nprint 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=\"\"：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nx=\"a\"\ny=\"b\"\n# 换行输出\nprint( x )\nprint( y )\n \nprint('---------')\n# 不换行输出\nprint( x, end=\" \" )\nprint( y, end=\" \" )\nprint()\n\n以上实例执行结果为：\n\na\nb\n---------\na b\n\n更多内容参考：Python2 与 Python3 print 不换行\n\nimport 与 from...import\n\n在 python 用 import 或者 from...import 来导入相应的模块。\n\n将整个模块(somemodule)导入，格式为： import somemodule\n\n从某个模块中导入某个函数,格式为： from somemodule import somefunction\n\n从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc\n\n将某个模块中的全部函数导入，格式为： from somemodule import *\n\n导入 sys 模块\nimport sys\nprint('================Python import mode==========================')\nprint ('命令行参数为:')\nfor i in sys.argv:\n    print (i)\nprint ('\\n python 路径为',sys.path)\n导入 sys 模块的 argv,path 成员\nfrom sys import argv,path  #  导入特定的成员\n \nprint('================python from import===================================')\nprint('path:',path) # 因为已经导入path成员，所以此处引用时不需要加sys.path\n命令行参数\n\n很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息：\n\n$ python -h\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nOptions and arguments (and corresponding environment variables):\n-c cmd : program passed in as string (terminates option list)\n-d     : debug output from parser (also PYTHONDEBUG=x)\n-E     : ignore environment variables (such as PYTHONPATH)\n-h     : print this help message and exit\n\n[ etc. ]\n\n我们在使用脚本形式执行 Python 时，可以接收命令行输入的参数，具体使用可以参照 Python 3 命令行参数。\n\n Python3 VScode\nPython3 基本数据类型 \n8 篇笔记\n 写笔记\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}