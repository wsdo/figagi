{
	"title": "Python3 日期和时间 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python3-date-time.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\nPython3 基础语法\nPython3 基本数据类型\nPython3 数据类型转换\nPython3 解释器\nPython3 注释\nPython3 运算符\nPython3 数字(Number)\nPython3 字符串\nPython3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\nPython3 迭代器与生成器\nPython3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\nPython3 命名空间/作用域\nPython3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\nPython3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\nPython3 XML 解析\nPython3 JSON\n Python3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python3 JSON 数据解析\nPython3 内置函数 \nPython3 日期和时间\n\nPython 程序能用很多方式处理日期和时间，转换日期格式是一个常见的功能。\n\nPython 提供了一个 time 和 calendar 模块可以用于格式化日期和时间。\n\n时间间隔是以秒为单位的浮点小数。\n\n每个时间戳都以自从 1970 年 1 月 1 日午夜（历元）经过了多长时间来表示。\n\nPython 的 time 模块下有很多函数可以转换常见日期格式。如函数 time.time() 用于获取当前时间戳, 如下实例:\n\n实例\n#!/usr/bin/python3\n\nimport time  # 引入time模块\n\nticks = time.time()\nprint (\"当前时间戳为:\", ticks)\n\n\n以上实例输出结果：\n\n当前时间戳为: 1459996086.7115328\n\n时间戳单位最适于做日期运算。但是1970年之前的日期就无法以此表示了。太遥远的日期也不行，UNIX和Windows只支持到2038年。\n\n\n\n什么是时间元组？\n\n很多Python函数用一个元组装起来的9组数字处理时间:\n\n序号\t字段\t值\n0\t4位数年\t2008\n1\t月\t1 到 12\n2\t日\t1到31\n3\t小时\t0到23\n4\t分钟\t0到59\n5\t秒\t0到61 (60或61 是闰秒)\n6\t一周的第几日\t0到6 (0是周一)\n7\t一年的第几日\t1到366 (儒略历)\n8\t夏令时\t-1, 0, 1, -1是决定是否为夏令时的标识\n\n上述也就是 struct_time 元组。这种结构具有如下属性：\n\n序号\t属性\t值\n0\ttm_year\t2008\n1\ttm_mon\t1 到 12\n2\ttm_mday\t1 到 31\n3\ttm_hour\t0 到 23\n4\ttm_min\t0 到 59\n5\ttm_sec\t0 到 61 (60或61 是闰秒)\n6\ttm_wday\t0 到 6 (0是周一)\n7\ttm_yday\t一年中的第几天，1 到 366\n8\ttm_isdst\t是否为夏令时，值有：1(夏令时)、0(不是夏令时)、-1(未知)，默认 -1\n\n\n获取当前时间\n\n从返回浮点数的时间戳方式向时间元组转换，只要将浮点数传递给如localtime之类的函数。\n\n#!/usr/bin/python3\n\nimport time\n\nlocaltime = time.localtime(time.time())\nprint (\"本地时间为 :\", localtime)\n\n以上实例输出结果：\n\n本地时间为 : time.struct_time(tm_year=2016, tm_mon=4, tm_mday=7, tm_hour=10, tm_min=28, tm_sec=49, tm_wday=3, tm_yday=98, tm_isdst=0)\n\n\n获取格式化的时间\n\n你可以根据需求选取各种格式，但是最简单的获取可读的时间模式的函数是asctime():\n\n#!/usr/bin/python3\n\nimport time\n\nlocaltime = time.asctime( time.localtime(time.time()) )\nprint (\"本地时间为 :\", localtime)\n\n以上实例输出结果：\n\n本地时间为 : Thu Apr  7 10:29:13 2016\n格式化日期\n\n我们可以使用 time 模块的 strftime 方法来格式化日期：\n\ntime.strftime(format[, t])\n实例\n#!/usr/bin/python3\n\nimport time\n\n# 格式化成2016-03-20 11:45:39形式\nprint (time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n\n# 格式化成Sat Mar 28 22:24:24 2016形式\nprint (time.strftime(\"%a %b %d %H:%M:%S %Y\", time.localtime()))\n \n# 将格式字符串转换为时间戳\na = \"Sat Mar 28 22:24:24 2016\"\nprint (time.mktime(time.strptime(a,\"%a %b %d %H:%M:%S %Y\")))\n\n\n以上实例输出结果：\n\n2016-04-07 10:29:46\nThu Apr 07 10:29:46 2016\n1459175064.0\n\npython中时间日期格式化符号：\n\n%y 两位数的年份表示（00-99）\n%Y 四位数的年份表示（000-9999）\n%m 月份（01-12）\n%d 月内中的一天（0-31）\n%H 24小时制小时数（0-23）\n%I 12小时制小时数（01-12）\n%M 分钟数（00=59）\n%S 秒（00-59）\n%a 本地简化星期名称\n%A 本地完整星期名称\n%b 本地简化的月份名称\n%B 本地完整的月份名称\n%c 本地相应的日期表示和时间表示\n%j 年内的一天（001-366）\n%p 本地A.M.或P.M.的等价符\n%U 一年中的星期数（00-53）星期天为星期的开始\n%w 星期（0-6），星期天为星期的开始\n%W 一年中的星期数（00-53）星期一为星期的开始\n%x 本地相应的日期表示\n%X 本地相应的时间表示\n%Z 当前时区的名称\n%% %号本身\n获取某月日历\n\nCalendar 模块有很广泛的方法用来处理年历和月历，例如打印某月的月历：\n\n实例\n#!/usr/bin/python3\n\nimport calendar\n\ncal = calendar.month(2016, 1)\nprint (\"以下输出2016年1月份的日历:\")\nprint (cal)\n\n\n以上实例输出结果：\n\n以下输出2016年1月份的日历:\n    January 2016\nMo Tu We Th Fr Sa Su\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\nTime 模块\n\nTime 模块包含了以下内置函数，既有时间处理的，也有转换时间格式的：\n\n序号\t函数及描述\t实例\n1\ttime.altzone\n返回格林威治西部的夏令时地区的偏移秒数。如果该地区在格林威治东部会返回负值（如西欧，包括英国）。对夏令时启用地区才能使用。\t\n\n以下实例展示了 altzone()函数的使用方法：\n\n>>> import time\n>>> print (\"time.altzone %d \" % time.altzone)\ntime.altzone -28800 \n\n2\ttime.asctime([tupletime])\n接受时间元组并返回一个可读的形式为\"Tue Dec 11 18:07:14 2008\"（2008年12月11日 周二18时07分14秒）的24个字符的字符串。\t\n\n以下实例展示了 asctime()函数的使用方法：\n\n>>> import time\n>>> t = time.localtime()\n>>> print (\"time.asctime(t): %s \" % time.asctime(t))\ntime.asctime(t): Thu Apr  7 10:36:20 2016 \n\n3\ttime.clock()\n用以浮点数计算的秒数返回当前的CPU时间。用来衡量不同程序的耗时，比time.time()更有用。\t\n\n实例\n\n由于该方法依赖操作系统，在 Python 3.3 以后不被推荐，而在 3.8 版本中被移除，需使用下列两个函数替代。\n\ntime.perf_counter()  # 返回系统运行时间\ntime.process_time()  # 返回进程运行时间\n\n4\ttime.ctime([secs])\n作用相当于asctime(localtime(secs))，未给参数相当于asctime()\t\n\n以下实例展示了 ctime()函数的使用方法：\n\n>>> import time\n>>> print (\"time.ctime() : %s\" % time.ctime())\ntime.ctime() : Thu Apr  7 10:51:58 2016\n\n5\ttime.gmtime([secs])\n接收时间戳（1970纪元后经过的浮点秒数）并返回格林威治天文时间下的时间元组t。注：t.tm_isdst始终为0\t\n\n以下实例展示了 gmtime()函数的使用方法：\n\n>>> import time\n>>> print (\"gmtime :\", time.gmtime(1455508609.34375))\ngmtime : time.struct_time(tm_year=2016, tm_mon=2, tm_mday=15, tm_hour=3, tm_min=56, tm_sec=49, tm_wday=0, tm_yday=46, tm_isdst=0)\n\n6\ttime.localtime([secs]\n接收时间戳（1970纪元后经过的浮点秒数）并返回当地时间下的时间元组t（t.tm_isdst可取0或1，取决于当地当时是不是夏令时）。\t\n\n以下实例展示了 localtime()函数的使用方法：\n\n>>> import time\n>>> print (\"localtime(): \", time.localtime(1455508609.34375))\nlocaltime():  time.struct_time(tm_year=2016, tm_mon=2, tm_mday=15, tm_hour=11, tm_min=56, tm_sec=49, tm_wday=0, tm_yday=46, tm_isdst=0)\n\n7\ttime.mktime(tupletime)\n接受时间元组并返回时间戳（1970纪元后经过的浮点秒数）。\t实例\n8\ttime.sleep(secs)\n推迟调用线程的运行，secs指秒数。\t\n\n以下实例展示了 sleep()函数的使用方法：\n\n#!/usr/bin/python3\nimport time\n\nprint (\"Start : %s\" % time.ctime())\ntime.sleep( 5 )\nprint (\"End : %s\" % time.ctime())\n\n9\ttime.strftime(fmt[,tupletime])\n接收以时间元组，并返回以可读字符串表示的当地时间，格式由fmt决定。\t\n\n以下实例展示了 strftime()函数的使用方法：\n\n>>> import time\n>>> print (time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n2016-04-07 11:18:05\n\n10\ttime.strptime(str,fmt='%a %b %d %H:%M:%S %Y')\n根据fmt的格式把一个时间字符串解析为时间元组。\t\n\n以下实例展示了 strptime()函数的使用方法：\n\n>>> import time\n>>> struct_time = time.strptime(\"30 Nov 00\", \"%d %b %y\")\n>>> print (\"返回元组: \", struct_time)\n返回元组:  time.struct_time(tm_year=2000, tm_mon=11, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1)\n\n11\ttime.time( )\n返回当前时间的时间戳（1970纪元后经过的浮点秒数）。\t\n\n以下实例展示了 time()函数的使用方法：\n\n>>> import time\n>>> print(time.time())\n1459999336.1963577\n\n12\ttime.tzset()\n根据环境变量TZ重新初始化时间相关设置。\t实例\n13\ttime.perf_counter()\n返回计时器的精准时间（系统的运行时间），包含整个系统的睡眠时间。由于返回值的基准点是未定义的，所以，只有连续调用的结果之间的差才是有效的。\t实例\n14\ttime.process_time()\n返回当前进程执行 CPU 的时间总和，不包含睡眠时间。由于返回值的基准点是未定义的，所以，只有连续调用的结果之间的差才是有效的。\t \n\nTime模块包含了以下2个非常重要的属性：\n\n序号\t属性及描述\n1\ttime.timezone\n属性time.timezone是当地时区（未启动夏令时）距离格林威治的偏移秒数（>0，美洲;<=0大部分欧洲，亚洲，非洲）。\n2\ttime.tzname\n属性time.tzname包含一对根据情况的不同而不同的字符串，分别是带夏令时的本地时区名称，和不带的。\n\n\n日历（Calendar）模块\n\n此模块的函数都是日历相关的，例如打印某月的字符月历。\n\n星期一是默认的每周第一天，星期天是默认的最后一天。更改设置需调用calendar.setfirstweekday()函数。模块包含了以下内置函数：\n\n序号\t函数及描述\n1\tcalendar.calendar(year,w=2,l=1,c=6)\n返回一个多行字符串格式的 year 年年历，3 个月一行，间隔距离为 c。 每日宽度间隔为w字符。每行长度为 21* W+18+2* C。l 是每星期行数。\n2\tcalendar.firstweekday( )\n返回当前每周起始日期的设置。默认情况下，首次载入 calendar 模块时返回 0，即星期一。\n3\tcalendar.isleap(year)\n\n\n是闰年返回 True，否则为 False。\n\n>>> import calendar\n>>> print(calendar.isleap(2000))\nTrue\n>>> print(calendar.isleap(1900))\nFalse\n\n4\tcalendar.leapdays(y1,y2)\n返回在Y1，Y2两年之间的闰年总数。\n5\tcalendar.month(year,month,w=2,l=1)\n返回一个多行字符串格式的year年month月日历，两行标题，一周一行。每日宽度间隔为w字符。每行的长度为7* w+6。l是每星期的行数。\n6\tcalendar.monthcalendar(year,month)\n返回一个整数的单层嵌套列表。每个子列表装载代表一个星期的整数。Year年month月外的日期都设为0;范围内的日子都由该月第几日表示，从1开始。\n7\tcalendar.monthrange(year,month)\n\n\n返回两个整数。第一个是该月的星期几，第二个是该月有几天。星期几是从0（星期一）到 6（星期日）。\n\n>>> import calendar\n>>> calendar.monthrange(2014, 11)\n(5, 30)\n\n(5, 30)解释：5 表示 2014 年 11 月份的第一天是周六，30 表示 2014 年 11 月份总共有 30 天。\n\n\n8\tcalendar.prcal(year, w=0, l=0, c=6, m=3)\n相当于 print (calendar.calendar(year, w=0, l=0, c=6, m=3))。\n9\tcalendar.prmonth(theyear, themonth, w=0, l=0)\n相当于 print(calendar.month(theyear, themonth, w=0, l=0))。\n10\tcalendar.setfirstweekday(weekday)\n设置每周的起始日期码。0（星期一）到6（星期日）。\n11\tcalendar.timegm(tupletime)\n和time.gmtime相反：接受一个时间元组形式，返回该时刻的时间戳（1970纪元后经过的浮点秒数）。\n12\tcalendar.weekday(year,month,day)\n返回给定日期的日期码。0（星期一）到6（星期日）。月份为 1（一月） 到 12（12月）。\n\n\n其他相关模块和函数\n\n在Python中，其他处理日期和时间的模块还有：\n\ntime 模块\ndatetime模块\n Python3 JSON 数据解析\nPython3 内置函数 \n2 篇笔记\n 写笔记\n\n   GaiFan\n\n  343***128@qq.com\n\n   参考地址\n\n124\n\nperf_counter 进度条实例：\n\nimport time\n\nscale = 50 \n\nprint(\"执行开始\".center(scale//2,\"-\"))  # .center() 控制输出的样式，宽度为 25//2，即 22，汉字居中，两侧填充 -\n\nstart = time.perf_counter() # 调用一次 perf_counter()，从计算机系统里随机选一个时间点A，计算其距离当前时间点B1有多少秒。当第二次调用该函数时，默认从第一次调用的时间点A算起，距离当前时间点B2有多少秒。两个函数取差，即实现从时间点B1到B2的计时功能。\nfor i in range(scale+1):   \n    a = '*' * i             # i 个长度的 * 符号\n    b = '.' * (scale-i)  # scale-i） 个长度的 . 符号。符号 * 和 . 总长度为50 \n    c = (i/scale)*100  # 显示当前进度，百分之多少\n    dur = time.perf_counter() - start    # 计时，计算进度条走到某一百分比的用时\n    print(\"\\r{:^3.0f}%[{}->{}]{:.2f}s\".format(c,a,b,dur),end='')  # \\r用来在每次输出完成后，将光标移至行首，这样保证进度条始终在同一行输出，即在一行不断刷新的效果；{:^3.0f}，输出格式为居中，占3位，小数点后0位，浮点型数，对应输出的数为c；{}，对应输出的数为a；{}，对应输出的数为b；{:.2f}，输出有两位小数的浮点数，对应输出的数为dur；end=''，用来保证不换行，不加这句默认换行。\n    time.sleep(0.1)     # 在输出下一个百分之几的进度前，停止0.1秒\nprint(\"\\n\"+\"执行结果\".center(scale//2,'-'))\n\n测试输出：\n\n-----------执行开始----------\n24 %[************->......................................]1.24s\nGaiFan\n\n   GaiFan\n\n  343***128@qq.com\n\n   参考地址\n\n5年前 (2018-09-29)\n\n   爱在旧城窄巷\n\n  894***679@qq.com\n\n   参考地址\n\n59\n#!/usr/bin/python\n\nimport time\nimport calendar\n\n\n\"\"\"\n    时间元组（年、月、日、时、分、秒、一周的第几日、一年的第几日、夏令时）\n        一周的第几日: 0-6\n        一年的第几日: 1-366\n        夏令时: -1, 0, 1\n\"\"\"\n\n\"\"\"\n    python中时间日期格式化符号：\n    ------------------------------------\n    %y 两位数的年份表示（00-99）\n    %Y 四位数的年份表示（000-9999）\n    %m 月份（01-12）\n    %d 月内中的一天（0-31）\n    %H 24小时制小时数（0-23）\n    %I 12小时制小时数（01-12）\n    %M 分钟数（00=59）\n    %S 秒（00-59）\n    %a 本地简化星期名称\n    %A 本地完整星期名称\n    %b 本地简化的月份名称\n    %B 本地完整的月份名称\n    %c 本地相应的日期表示和时间表示\n    %j 年内的一天（001-366）\n    %p 本地A.M.或P.M.的等价符\n    %U 一年中的星期数（00-53）星期天为星期的开始\n    %w 星期（0-6），星期天为星期的开始\n    %W 一年中的星期数（00-53）星期一为星期的开始\n    %x 本地相应的日期表示\n    %X 本地相应的时间表示\n    %Z 当前时区的名称  # 乱码\n    %% %号本身\n\"\"\"\n\n\n# （1）当前时间戳\n# 1538271871.226226\ntime.time()\n\n\n# （2）时间戳 → 时间元组，默认为当前时间\n# time.struct_time(tm_year=2018, tm_mon=9, tm_mday=3, tm_hour=9, tm_min=4, tm_sec=1, tm_wday=6, tm_yday=246, tm_isdst=0)\ntime.localtime()\ntime.localtime(1538271871.226226)\n\n\n# （3）时间戳 → 可视化时间\n# time.ctime(时间戳)，默认为当前时间\ntime.ctime(1538271871.226226)\n\n\n# （4）时间元组 → 时间戳\n# 1538271871\ntime.mktime((2018, 9, 30, 9, 44, 31, 6, 273, 0))\n\n\n# （5）时间元组 → 可视化时间\n# time.asctime(时间元组)，默认为当前时间\ntime.asctime()\ntime.asctime((2018, 9, 30, 9, 44, 31, 6, 273, 0))\ntime.asctime(time.localtime(1538271871.226226))\n\n\n# （6）时间元组 → 可视化时间（定制）\n# time.strftime(要转换成的格式，时间元组)\ntime.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n\n\n# （7）可视化时间（定制） → 时间元祖\n# time.strptime(时间字符串，时间格式)\nprint(time.strptime('2018-9-30 11:32:23', '%Y-%m-%d %H:%M:%S'))\n\n\n# （8）浮点数秒数，用于衡量不同程序的耗时，前后两次调用的时间差\ntime.clock()\n爱在旧城窄巷\n\n   爱在旧城窄巷\n\n  894***679@qq.com\n\n   参考地址\n\n5年前 (2018-09-30)\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}