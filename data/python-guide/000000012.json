{
	"title": "Python3 字符串 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python3-string.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\nPython3 基础语法\nPython3 基本数据类型\nPython3 数据类型转换\nPython3 解释器\nPython3 注释\nPython3 运算符\nPython3 数字(Number)\n Python3 字符串\nPython3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\nPython3 迭代器与生成器\nPython3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\nPython3 命名空间/作用域\nPython3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\nPython3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\nPython3 XML 解析\nPython3 JSON\nPython3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python3 数字(Number)\nPython3 列表 \nPython3 字符串\n\n字符串是 Python 中最常用的数据类型。我们可以使用引号( ' 或 \" )来创建字符串。\n\n创建字符串很简单，只要为变量分配一个值即可。例如：\n\nvar1 = 'Hello World!'\nvar2 = \"Runoob\"\nPython 访问字符串中的值\n\nPython 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。\n\nPython 访问子字符串，可以使用方括号 [] 来截取字符串，字符串的截取的语法格式如下：\n\n变量[头下标:尾下标]\n\n索引值以 0 为开始值，-1 为从末尾的开始位置。\n\n如下实例：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nvar1 = 'Hello World!'\nvar2 = \"Runoob\"\n \nprint (\"var1[0]: \", var1[0])\nprint (\"var2[1:5]: \", var2[1:5])\n\n以上实例执行结果：\n\nvar1[0]:  H\nvar2[1:5]:  unoo\nPython 字符串更新\n\n你可以截取字符串的一部分并与其他字段拼接，如下实例：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nvar1 = 'Hello World!'\n \nprint (\"已更新字符串 : \", var1[:6] + 'Runoob!')\n\n以上实例执行结果\n\n已更新字符串 :  Hello Runoob!\nPython 转义字符\n\n在需要在字符中使用特殊字符时，python 用反斜杠 \\ 转义字符。如下表：\n\n转义字符\t描述\t实例\n\\(在行尾时)\t续行符\t\n>>> print(\"line1 \\\n... line2 \\\n... line3\")\nline1 line2 line3\n>>> \n\n\\\\\t反斜杠符号\t\n>>> print(\"\\\\\")\n\\\n\n\\'\t单引号\t\n>>> print('\\'')\n'\n\n\\\"\t双引号\t\n>>> print(\"\\\"\")\n\"\n\n\\a\t响铃\t\n>>> print(\"\\a\")\n执行后电脑有响声。\n\\b\t退格(Backspace)\t\n>>> print(\"Hello \\b World!\")\nHello World!\n\n\\000\t空\t\n>>> print(\"\\000\")\n\n>>> \n\n\\n\t换行\t\n>>> print(\"\\n\")\n\n\n>>>\n\n\\v\t纵向制表符\t\n>>> print(\"Hello \\v World!\")\nHello \n       World!\n>>>\n\n\\t\t横向制表符\t\n>>> print(\"Hello \\t World!\")\nHello      World!\n>>>\n\n\\r\t回车，将 \\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\r 后面的内容完全替换完成。\t\n>>> print(\"Hello\\rWorld!\")\nWorld!\n>>> print('google runoob taobao\\r123456')\n123456 runoob taobao\n\n\\f\t换页\t\n>>> print(\"Hello \\f World!\")\nHello \n       World!\n>>> \n\n\\yyy\t八进制数，y 代表 0~7 的字符，例如：\\012 代表换行。\t\n>>> print(\"\\110\\145\\154\\154\\157\\40\\127\\157\\162\\154\\144\\41\")\nHello World!\n\n\\xyy\t十六进制数，以 \\x 开头，y 代表的字符，例如：\\x0a 代表换行\t\n>>> print(\"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x21\")\nHello World!\n\n\\other\t其它的字符以普通格式输出\t \n\n使用 \\r 实现百分比精度：\n\n实例\nimport time\n\nfor i in range(101):\n    print(\"\\r{:3}%\".format(i),end=' ')\n    time.sleep(0.05)\n\n\n以下实例，我们使用了不同的转义字符来演示单引号、换行符、制表符、退格符、换页符、ASCII、二进制、八进制数和十六进制数的效果：\n\n实例\nprint('\\'Hello, world!\\'')  # 输出：'Hello, world!'\n\nprint(\"Hello, world!\\nHow are you?\")  # 输出：Hello, world!\n                                        #       How are you?\n\nprint(\"Hello, world!\\tHow are you?\")  # 输出：Hello, world!    How are you?\n\nprint(\"Hello,\\b world!\")  # 输出：Hello world!\n\nprint(\"Hello,\\f world!\")  # 输出：\n                           # Hello,\n                           #  world!\n\nprint(\"A 对应的 ASCII 值为：\", ord('A'))  # 输出：A 对应的 ASCII 值为： 65\n\nprint(\"\\x41 为 A 的 ASCII 代码\")  # 输出：A 为 A 的 ASCII 代码\n\ndecimal_number = 42\nbinary_number = bin(decimal_number)  # 十进制转换为二进制\nprint('转换为二进制:', binary_number)  # 转换为二进制: 0b101010\n\noctal_number = oct(decimal_number)  # 十进制转换为八进制\nprint('转换为八进制:', octal_number)  # 转换为八进制: 0o52\n\nhexadecimal_number = hex(decimal_number)  # 十进制转换为十六进制\nprint('转换为十六进制:', hexadecimal_number) # 转换为十六进制: 0x2a\n\nPython 字符串运算符\n\n下表实例变量 a 值为字符串 \"Hello\"，b 变量值为 \"Python\"：\n\n操作符\t描述\t实例\n+\t字符串连接\ta + b 输出结果： HelloPython\n*\t重复输出字符串\ta*2 输出结果：HelloHello\n[]\t通过索引获取字符串中字符\ta[1] 输出结果 e\n[ : ]\t截取字符串中的一部分，遵循左闭右开原则，str[0:2] 是不包含第 3 个字符的。\ta[1:4] 输出结果 ell\nin\t成员运算符 - 如果字符串中包含给定的字符返回 True\t'H' in a 输出结果 True\nnot in\t成员运算符 - 如果字符串中不包含给定的字符返回 True\t'M' not in a 输出结果 True\nr/R\t原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 r（可以大小写）以外，与普通字符串有着几乎完全相同的语法。\t\nprint( r'\\n' )\nprint( R'\\n' )\n\n%\t格式字符串\t请看下一节内容。\n实例(Python 3.0+)\n#!/usr/bin/python3\n \na = \"Hello\"\nb = \"Python\"\n \nprint(\"a + b 输出结果：\", a + b)\nprint(\"a * 2 输出结果：\", a * 2)\nprint(\"a[1] 输出结果：\", a[1])\nprint(\"a[1:4] 输出结果：\", a[1:4])\n \nif( \"H\" in a) :\n    print(\"H 在变量 a 中\")\nelse :\n    print(\"H 不在变量 a 中\")\n \nif( \"M\" not in a) :\n    print(\"M 不在变量 a 中\")\nelse :\n    print(\"M 在变量 a 中\")\n \nprint (r'\\n')\nprint (R'\\n')\n\n以上实例输出结果为：\n\na + b 输出结果： HelloPython\na * 2 输出结果： HelloHello\na[1] 输出结果： e\na[1:4] 输出结果： ell\nH 在变量 a 中\nM 不在变量 a 中\n\\n\n\\n\nPython 字符串格式化\n\nPython 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。\n\n在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nprint (\"我叫 %s 今年 %d 岁!\" % ('小明', 10))\n\n以上实例输出结果：\n\n我叫 小明 今年 10 岁!\n\npython字符串格式化符号:\n\n    符   号\t描述\n      %c\t 格式化字符及其ASCII码\n      %s\t 格式化字符串\n      %d\t 格式化整数\n      %u\t 格式化无符号整型\n      %o\t 格式化无符号八进制数\n      %x\t 格式化无符号十六进制数\n      %X\t 格式化无符号十六进制数（大写）\n      %f\t 格式化浮点数字，可指定小数点后的精度\n      %e\t 用科学计数法格式化浮点数\n      %E\t 作用同%e，用科学计数法格式化浮点数\n      %g\t %f和%e的简写\n      %G\t %f 和 %E 的简写\n      %p\t 用十六进制数格式化变量的地址\n\n格式化操作符辅助指令:\n\n符号\t功能\n*\t定义宽度或者小数点精度\n-\t用做左对齐\n+\t在正数前面显示加号( + )\n<sp>\t在正数前面显示空格\n#\t在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')\n0\t显示的数字前面填充'0'而不是默认的空格\n%\t'%%'输出一个单一的'%'\n(var)\t映射变量(字典参数)\nm.n.\tm 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)\n\nPython2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。\n\nPython三引号\n\npython三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。实例如下\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \npara_str = \"\"\"这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB ( \\t )。\n也可以使用换行符 [ \\n ]。\n\"\"\"\nprint (para_str)\n\n以上实例执行结果为：\n\n这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB (    )。\n也可以使用换行符 [ \n ]。\n\n三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（所见即所得）格式的。\n\n一个典型的用例是，当你需要一块HTML或者SQL时，这时用字符串组合，特殊字符串转义将会非常的繁琐。\n\nerrHTML = '''\n<HTML><HEAD><TITLE>\nFriends CGI Demo</TITLE></HEAD>\n<BODY><H3>ERROR</H3>\n<B>%s</B><P>\n<FORM><INPUT TYPE=button VALUE=Back\nONCLICK=\"window.history.back()\"></FORM>\n</BODY></HTML>\n'''\ncursor.execute('''\nCREATE TABLE users (  \nlogin VARCHAR(8), \nuid INTEGER,\nprid INTEGER)\n''')\nf-string\n\nf-string 是 python3.6 之后版本添加的，称之为字面量格式化字符串，是新的格式化字符串的语法。\n\n之前我们习惯用百分号 (%):\n\n实例\n>>> name = 'Runoob'\n>>> 'Hello %s' % name\n'Hello Runoob'\n\n\nf-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去，实例如下：\n\n实例\n>>> name = 'Runoob'\n>>> f'Hello {name}'  # 替换变量\n'Hello Runoob'\n>>> f'{1+2}'         # 使用表达式\n'3'\n\n>>> w = {'name': 'Runoob', 'url': 'www.runoob.com'}\n>>> f'{w[\"name\"]}: {w[\"url\"]}'\n'Runoob: www.runoob.com'\n\n\n用了这种方式明显更简单了，不用再去判断使用 %s，还是 %d。\n\n在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果：\n\n实例\n>>> x = 1\n>>> print(f'{x+1}')   # Python 3.6\n2\n\n>>> x = 1\n>>> print(f'{x+1=}')   # Python 3.8\nx+1=2\n\nUnicode 字符串\n\n在Python2中，普通字符串是以8位ASCII码进行存储的，而Unicode字符串则存储为16位unicode字符串，这样能够表示更多的字符集。使用的语法是在字符串前面加上前缀 u。\n\n在Python3中，所有的字符串都是Unicode字符串。\n\nPython 的字符串内建函数\n\nPython 的字符串常用内建函数如下：\n\n序号\t方法及描述\n1\t\n\ncapitalize()\n将字符串的第一个字符转换为大写\n\n\n2\t\n\ncenter(width, fillchar)\n\n返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。\n3\t\n\ncount(str, beg= 0,end=len(string))\n\n\n返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数\n4\t\n\nbytes.decode(encoding=\"utf-8\", errors=\"strict\")\n\n\nPython3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。\n5\t\n\nencode(encoding='UTF-8',errors='strict')\n\n\n以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace'\n6\t\n\nendswith(suffix, beg=0, end=len(string))\n检查字符串是否以 suffix 结束，如果 beg 或者 end 指定则检查指定的范围内是否以 suffix 结束，如果是，返回 True,否则返回 False。\n\n\n7\t\n\nexpandtabs(tabsize=8)\n\n\n把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。\n8\t\n\nfind(str, beg=0, end=len(string))\n\n\n检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1\n9\t\n\nindex(str, beg=0, end=len(string))\n\n\n跟find()方法一样，只不过如果str不在字符串中会报一个异常。\n10\t\n\nisalnum()\n\n\n如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False\n11\t\n\nisalpha()\n\n\n如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False\n12\t\n\nisdigit()\n\n\n如果字符串只包含数字则返回 True 否则返回 False..\n13\t\n\nislower()\n\n\n如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False\n14\t\n\nisnumeric()\n\n\n如果字符串中只包含数字字符，则返回 True，否则返回 False\n15\t\n\nisspace()\n\n\n如果字符串中只包含空白，则返回 True，否则返回 False.\n16\t\n\nistitle()\n\n\n如果字符串是标题化的(见 title())则返回 True，否则返回 False\n17\t\n\nisupper()\n\n\n如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False\n18\t\n\njoin(seq)\n\n\n以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串\n19\t\n\nlen(string)\n\n\n返回字符串长度\n20\t\n\nljust(width[, fillchar])\n\n\n返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。\n21\t\n\nlower()\n\n\n转换字符串中所有大写字符为小写.\n22\t\n\nlstrip()\n\n\n截掉字符串左边的空格或指定字符。\n23\t\n\nmaketrans()\n\n\n创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。\n24\t\n\nmax(str)\n\n\n返回字符串 str 中最大的字母。\n25\t\n\nmin(str)\n\n\n返回字符串 str 中最小的字母。\n26\t\n\nreplace(old, new [, max])\n\n\n把 将字符串中的 old 替换成 new,如果 max 指定，则替换不超过 max 次。\n27\t\n\nrfind(str, beg=0,end=len(string))\n\n\n类似于 find()函数，不过是从右边开始查找.\n28\t\n\nrindex( str, beg=0, end=len(string))\n\n\n类似于 index()，不过是从右边开始.\n29\t\n\nrjust(width,[, fillchar])\n\n\n返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串\n30\t\n\nrstrip()\n\n\n删除字符串末尾的空格或指定字符。\n31\t\n\nsplit(str=\"\", num=string.count(str))\n\n\n以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串\n32\t\n\nsplitlines([keepends])\n\n\n按照行('\\r', '\\r\\n', \\n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。\n33\t\n\nstartswith(substr, beg=0,end=len(string))\n\n\n检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。\n34\t\n\nstrip([chars])\n\n\n在字符串上执行 lstrip()和 rstrip()\n35\t\n\nswapcase()\n\n\n将字符串中大写转换为小写，小写转换为大写\n36\t\n\ntitle()\n\n\n返回\"标题化\"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())\n37\t\n\ntranslate(table, deletechars=\"\")\n\n\n根据 table 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中\n38\t\n\nupper()\n\n\n转换字符串中的小写字母为大写\n39\t\n\nzfill (width)\n\n\n返回长度为 width 的字符串，原字符串右对齐，前面填充0\n40\t\n\nisdecimal()\n\n\n检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。\n Python3 数字(Number)\nPython3 列表 \n12 篇笔记\n 写笔记\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}