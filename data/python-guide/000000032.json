{
	"title": "Python3 标准库概览 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python3-stdlib.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\nPython3 基础语法\nPython3 基本数据类型\nPython3 数据类型转换\nPython3 解释器\nPython3 注释\nPython3 运算符\nPython3 数字(Number)\nPython3 字符串\nPython3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\nPython3 迭代器与生成器\nPython3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\nPython3 命名空间/作用域\n Python3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\nPython3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\nPython3 XML 解析\nPython3 JSON\nPython3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python3 命名空间/作用域\nPython3 实例 \nPython3 标准库概览\n\nPython 标准库非常庞大，所提供的组件涉及范围十分广泛，使用标准库我们可以让您轻松地完成各种任务。\n\n以下是一些 Python3 标准库中的模块：\n\nos 模块：os 模块提供了许多与操作系统交互的函数，例如创建、移动和删除文件和目录，以及访问环境变量等。\n\nsys 模块：sys 模块提供了与 Python 解释器和系统相关的功能，例如解释器的版本和路径，以及与 stdin、stdout 和 stderr 相关的信息。\n\ntime 模块：time 模块提供了处理时间的函数，例如获取当前时间、格式化日期和时间、计时等。\n\ndatetime 模块：datetime 模块提供了更高级的日期和时间处理函数，例如处理时区、计算时间差、计算日期差等。\n\nrandom 模块：random 模块提供了生成随机数的函数，例如生成随机整数、浮点数、序列等。\n\nmath 模块：math 模块提供了数学函数，例如三角函数、对数函数、指数函数、常数等。\n\nre 模块：re 模块提供了正则表达式处理函数，可以用于文本搜索、替换、分割等。\n\njson 模块：json 模块提供了 JSON 编码和解码函数，可以将 Python 对象转换为 JSON 格式，并从 JSON 格式中解析出 Python 对象。\n\nurllib 模块：urllib 模块提供了访问网页和处理 URL 的功能，包括下载文件、发送 POST 请求、处理 cookies 等。\n\n操作系统接口\n\nos模块提供了不少与操作系统相关联的函数。\n\n>>> import os\n>>> os.getcwd()      # 返回当前的工作目录\n'C:\\\\Python34'\n>>> os.chdir('/server/accesslogs')   # 修改当前的工作目录\n>>> os.system('mkdir today')   # 执行系统命令 mkdir \n0\n\n建议使用 \"import os\" 风格而非 \"from os import *\"。这样可以保证随操作系统不同而有所变化的 os.open() 不会覆盖内置函数 open()。\n\n在使用 os 这样的大型模块时内置的 dir() 和 help() 函数非常有用:\n\n>>> import os\n>>> dir(os)\n<returns a list of all module functions>\n>>> help(os)\n<returns an extensive manual page created from the module's docstrings>\n\n针对日常的文件和目录管理任务，:mod:shutil 模块提供了一个易于使用的高级接口:\n\n>>> import shutil\n>>> shutil.copyfile('data.db', 'archive.db')\n>>> shutil.move('/build/executables', 'installdir')\n文件通配符\n\nglob模块提供了一个函数用于从目录通配符搜索中生成文件列表:\n\n>>> import glob\n>>> glob.glob('*.py')\n['primes.py', 'random.py', 'quote.py']\n命令行参数\n\n通用工具脚本经常调用命令行参数。这些命令行参数以链表形式存储于 sys 模块的 argv 变量。例如在命令行中执行 \"python demo.py one two three\" 后可以得到以下输出结果:\n\n>>> import sys\n>>> print(sys.argv)\n['demo.py', 'one', 'two', 'three']\n错误输出重定向和程序终止\n\nsys 还有 stdin，stdout 和 stderr 属性，即使在 stdout 被重定向时，后者也可以用于显示警告和错误信息。\n\n>>> sys.stderr.write('Warning, log file not found starting a new one\\n')\nWarning, log file not found starting a new one\n\n大多脚本的定向终止都使用 \"sys.exit()\"。\n\n字符串正则匹配\n\nre模块为高级字符串处理提供了正则表达式工具。对于复杂的匹配和处理，正则表达式提供了简洁、优化的解决方案:\n\n>>> import re\n>>> re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest')\n['foot', 'fell', 'fastest']\n>>> re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat')\n'cat in the hat'\n\n如果只需要简单的功能，应该首先考虑字符串方法，因为它们非常简单，易于阅读和调试:\n\n>>> 'tea for too'.replace('too', 'two')\n'tea for two'\n数学\n\nmath模块为浮点运算提供了对底层C函数库的访问:\n\n>>> import math\n>>> math.cos(math.pi / 4)\n0.70710678118654757\n>>> math.log(1024, 2)\n10.0\n\nrandom提供了生成随机数的工具。\n\n>>> import random\n>>> random.choice(['apple', 'pear', 'banana'])\n'apple'\n>>> random.sample(range(100), 10)   # sampling without replacement\n[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\n>>> random.random()    # random float\n0.17970987693706186\n>>> random.randrange(6)    # random integer chosen from range(6)\n4\n访问 互联网\n\n有几个模块用于访问互联网以及处理网络通信协议。其中最简单的两个是用于处理从 urls 接收的数据的 urllib.request 以及用于发送电子邮件的 smtplib:\n\n>>> from urllib.request import urlopen\n>>> for line in urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl'):\n...     line = line.decode('utf-8')  # Decoding the binary data to text.\n...     if 'EST' in line or 'EDT' in line:  # look for Eastern Time\n...         print(line)\n\n<BR>Nov. 25, 09:43:32 PM EST\n\n>>> import smtplib\n>>> server = smtplib.SMTP('localhost')\n>>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',\n... \"\"\"To: jcaesar@example.org\n... From: soothsayer@example.org\n...\n... Beware the Ides of March.\n... \"\"\")\n>>> server.quit()\n\n注意第二个例子需要本地有一个在运行的邮件服务器。\n\n日期和时间\n\ndatetime 模块为日期和时间处理同时提供了简单和复杂的方法。\n\n支持日期和时间算法的同时，实现的重点放在更有效的处理和格式化输出。\n\n实例\nimport datetime\n\n#获取当前日期和时间\ncurrent_datetime = datetime.datetime.now()\nprint(current_datetime)\n\n# 获取当前日期\ncurrent_date = datetime.date.today()\nprint(current_date)\n\n# 格式化日期\nformatted_datetime = current_datetime.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(formatted_datetime)  # 输出：2023-07-17 15:30:45\n\n\n输出结果为：\n\n2023-07-17 18:37:56.036914\n2023-07-17\n2023-07-17 18:37:56\n\n该模块还支持时区处理:\n\n>>> # 导入了 datetime 模块中的 date 类\n>>> from datetime import date\n>>> now = date.today()    # 当前日期\n>>> now\ndatetime.date(2023, 7, 17)\n>>> now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\")\n'07-17-23. 17 Jul 2023 is a Monday on the 17 day of July.'\n\n>>> # 创建了一个表示生日的日期对象\n>>> birthday = date(1964, 7, 31)\n>>> age = now - birthday   # 计算两个日期之间的时间差\n>>> age.days             # 变量age的days属性，表示时间差的天数\n21535\n数据压缩\n\n以下模块直接支持通用的数据打包和压缩格式：zlib，gzip，bz2，zipfile，以及 tarfile。\n\n>>> import zlib\n>>> s = b'witch which has which witches wrist watch'\n>>> len(s)\n41\n>>> t = zlib.compress(s)\n>>> len(t)\n37\n>>> zlib.decompress(t)\nb'witch which has which witches wrist watch'\n>>> zlib.crc32(s)\n226805979\n性能度量\n\n有些用户对了解解决同一问题的不同方法之间的性能差异很感兴趣。Python 提供了一个度量工具，为这些问题提供了直接答案。\n\n例如，使用元组封装和拆封来交换元素看起来要比使用传统的方法要诱人的多,timeit 证明了现代的方法更快一些。\n\n>>> from timeit import Timer\n>>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n0.57535828626024577\n>>> Timer('a,b = b,a', 'a=1; b=2').timeit()\n0.54962537085770791\n\n相对于 timeit 的细粒度，:mod:profile 和 pstats 模块提供了针对更大代码块的时间度量工具。\n\n测试模块\n\n开发高质量软件的方法之一是为每一个函数开发测试代码，并且在开发过程中经常进行测试\n\ndoctest模块提供了一个工具，扫描模块并根据程序中内嵌的文档字符串执行测试。\n\n测试构造如同简单的将它的输出结果剪切并粘贴到文档字符串中。\n\n通过用户提供的例子，它强化了文档，允许 doctest 模块确认代码的结果是否与文档一致:\n\ndef average(values):\n    \"\"\"Computes the arithmetic mean of a list of numbers.\n\n    >>> print(average([20, 30, 70]))\n    40.0\n    \"\"\"\n    return sum(values) / len(values)\n\nimport doctest\ndoctest.testmod()   # 自动验证嵌入测试\n\nunittest模块不像 doctest模块那么容易使用，不过它可以在一个独立的文件里提供一个更全面的测试集:\n\nimport unittest\n\nclass TestStatisticalFunctions(unittest.TestCase):\n\n    def test_average(self):\n        self.assertEqual(average([20, 30, 70]), 40.0)\n        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\n        self.assertRaises(ZeroDivisionError, average, [])\n        self.assertRaises(TypeError, average, 20, 30, 70)\n\nunittest.main() # Calling from the command line invokes all tests\n\n以上我们看到的只是 Python3 标准库中的一部分模块，还有很多其他模块可以在官方文档中查看完整的标准库文档：https://docs.python.org/zh-cn/3/library/index.html\n\n Python3 命名空间/作用域\nPython3 实例 \n3 篇笔记\n 写笔记\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}