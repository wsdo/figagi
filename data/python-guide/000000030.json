{
	"title": "Python3 命名空间和作用域 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python3-namespace-scope.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\nPython3 基础语法\nPython3 基本数据类型\nPython3 数据类型转换\nPython3 解释器\nPython3 注释\nPython3 运算符\nPython3 数字(Number)\nPython3 字符串\nPython3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\nPython3 迭代器与生成器\nPython3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\n Python3 命名空间/作用域\nPython3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\nPython3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\nPython3 XML 解析\nPython3 JSON\nPython3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python3 面向对象\nPython3 标准库概览 \nPython3 命名空间和作用域\n命名空间\n\n先看看官方文档的一段话：\n\nA namespace is a mapping from names to objects.Most namespaces are currently implemented as Python dictionaries。\n\n命名空间(Namespace)是从名称到对象的映射，大部分的命名空间都是通过 Python 字典来实现的。\n\n命名空间提供了在项目中避免名字冲突的一种方法。各个命名空间是独立的，没有任何关系的，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响。\n\n我们举一个计算机系统中的例子，一个文件夹(目录)中可以包含多个文件夹，每个文件夹中不能有相同的文件名，但不同文件夹中的文件可以重名。\n\n一般有三种命名空间：\n\n内置名称（built-in names）， Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等。\n全局名称（global names），模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。\n局部名称（local names），函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（类中定义的也是）\n\n命名空间查找顺序:\n\n假设我们要使用变量 runoob，则 Python 的查找顺序为：局部的命名空间 -> 全局命名空间 -> 内置命名空间。\n\n如果找不到变量 runoob，它将放弃查找并引发一个 NameError 异常:\n\nNameError: name 'runoob' is not defined。\n\n命名空间的生命周期：\n\n命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束。\n\n因此，我们无法从外部命名空间访问内部命名空间的对象。\n\n实例\n# var1 是全局名称\nvar1 = 5\ndef some_func():\n \n    # var2 是局部名称\n    var2 = 6\n    def some_inner_func():\n \n        # var3 是内嵌的局部名称\n        var3 = 7\n\n\n如下图所示，相同的对象名称可以存在于多个命名空间中。\n\n作用域\n\nA scope is a textual region of a Python program where a namespace is directly accessible. \"Directly accessible\" here means that an unqualified reference to a name attempts to find the name in the namespace.\n\n作用域就是一个 Python 程序可以直接访问命名空间的正文区域。\n\n在一个 python 程序中，直接访问一个变量，会从内到外依次访问所有的作用域直到找到，否则会报未定义的错误。\n\nPython 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。\n\n变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python 的作用域一共有4种，分别是：\n\n有四种作用域：\n\nL（Local）：最内层，包含局部变量，比如一个函数/方法内部。\nE（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。\nG（Global）：当前脚本的最外层，比如当前模块的全局变量。\nB（Built-in）： 包含了内建的变量/关键字等，最后被搜索。\n\n规则顺序： L –> E –> G –> B。\n\n在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。\n\ng_count = 0  # 全局作用域\ndef outer():\n    o_count = 1  # 闭包函数外的函数中\n    def inner():\n        i_count = 2  # 局部作用域\n\n内置作用域是通过一个名为 builtin 的标准模块来实现的，但是这个变量名自身并没有放入内置作用域内，所以必须导入这个文件才能够使用它。在Python3.0中，可以使用以下的代码来查看到底预定义了哪些变量:\n\n>>> import builtins\n>>> dir(builtins)\n\nPython 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问，如下代码：\n\n>>> if True:\n...  msg = 'I am from Runoob'\n... \n>>> msg\n'I am from Runoob'\n>>> \n\n实例中 msg 变量定义在 if 语句块中，但外部还是可以访问的。\n\n如果将 msg 定义在函数中，则它就是局部变量，外部不能访问：\n\n>>> def test():\n...     msg_inner = 'I am from Runoob'\n... \n>>> msg_inner\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'msg_inner' is not defined\n>>> \n\n从报错的信息上看，说明了 msg_inner 未定义，无法使用，因为它是局部变量，只有在函数内可以使用。\n\n全局变量和局部变量\n\n定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。\n\n局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。如下实例：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \ntotal = 0 # 这是一个全局变量\n# 可写函数说明\ndef sum( arg1, arg2 ):\n    #返回2个参数的和.\"\n    total = arg1 + arg2 # total在这里是局部变量.\n    print (\"函数内是局部变量 : \", total)\n    return total\n \n#调用sum函数\nsum( 10, 20 )\nprint (\"函数外是全局变量 : \", total)\n\n以上实例输出结果：\n\n函数内是局部变量 :  30\n函数外是全局变量 :  0\nglobal 和 nonlocal关键字\n\n当内部作用域想修改外部作用域的变量时，就要用到 global 和 nonlocal 关键字了。\n\n以下实例修改全局变量 num：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nnum = 1\ndef fun1():\n    global num  # 需要使用 global 关键字声明\n    print(num) \n    num = 123\n    print(num)\nfun1()\nprint(num)\n\n以上实例输出结果：\n\n1\n123\n123\n\n如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了，如下实例：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \ndef outer():\n    num = 10\n    def inner():\n        nonlocal num   # nonlocal关键字声明\n        num = 100\n        print(num)\n    inner()\n    print(num)\nouter()\n\n以上实例输出结果：\n\n100\n100\n\n另外有一种特殊情况，假设下面这段代码被运行：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \na = 10\ndef test():\n    a = a + 1\n    print(a)\ntest()\n\n以上程序执行，报错信息如下：\n\nTraceback (most recent call last):\n  File \"test.py\", line 7, in <module>\n    test()\n  File \"test.py\", line 5, in test\n    a = a + 1\nUnboundLocalError: local variable 'a' referenced before assignment\n\n错误信息为局部作用域引用错误，因为 test 函数中的 a 使用的是局部，未定义，无法修改。\n\n修改 a 为全局变量：\n\n实例\n#!/usr/bin/python3\n \na = 10\ndef test():\n    global a\n    a = a + 1\n    print(a)\ntest()\n\n执行输出结果为：\n\n11\n\n也可以通过函数参数传递：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \na = 10\ndef test(a):\n    a = a + 1\n    print(a)\ntest(a)\n\n执行输出结果为：\n\n11\n Python3 面向对象\nPython3 标准库概览 \n5 篇笔记\n 写笔记\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}