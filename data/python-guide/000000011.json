{
	"title": "Python3 运算符 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python3-basic-operators.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\nPython3 基础语法\nPython3 基本数据类型\nPython3 数据类型转换\nPython3 解释器\nPython3 注释\n Python3 运算符\nPython3 数字(Number)\nPython3 字符串\nPython3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\nPython3 迭代器与生成器\nPython3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\nPython3 命名空间/作用域\nPython3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\nPython3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\nPython3 XML 解析\nPython3 JSON\nPython3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python3 注释\nPython3 数字(Number) \nPython3 运算符\n什么是运算符？\n\n本章节主要说明 Python 的运算符。\n\n举个简单的例子:\n\n4 + 5 = 9\n\n例子中，4 和 5 被称为操作数，+ 称为运算符。\n\nPython 语言支持以下类型的运算符:\n\n算术运算符\n比较（关系）运算符\n赋值运算符\n逻辑运算符\n位运算符\n成员运算符\n身份运算符\n运算符优先级\n\n接下来让我们一个个来学习Python的运算符。\n\nPython算术运算符\n\n以下假设变量 a=10，变量 b=21：\n\n运算符\t描述\t实例\n+\t加 - 两个对象相加\ta + b 输出结果 31\n-\t减 - 得到负数或是一个数减去另一个数\ta - b 输出结果 -11\n*\t乘 - 两个数相乘或是返回一个被重复若干次的字符串\ta * b 输出结果 210\n/\t除 - x 除以 y\tb / a 输出结果 2.1\n%\t取模 - 返回除法的余数\tb % a 输出结果 1\n**\t幂 - 返回x的y次幂\ta**b 为10的21次方\n//\t取整除 - 往小的方向取整数\t\n>>> 9//2\n4\n>>> -9//2\n-5\n\n以下实例演示了Python所有算术运算符的操作：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \na = 21\nb = 10\nc = 0\n \nc = a + b\nprint (\"1 - c 的值为：\", c)\n \nc = a - b\nprint (\"2 - c 的值为：\", c)\n \nc = a * b\nprint (\"3 - c 的值为：\", c)\n \nc = a / b\nprint (\"4 - c 的值为：\", c)\n \nc = a % b\nprint (\"5 - c 的值为：\", c)\n \n# 修改变量 a 、b 、c\na = 2\nb = 3\nc = a**b \nprint (\"6 - c 的值为：\", c)\n \na = 10\nb = 5\nc = a//b \nprint (\"7 - c 的值为：\", c)\n\n以上实例输出结果：\n\n1 - c 的值为： 31\n2 - c 的值为： 11\n3 - c 的值为： 210\n4 - c 的值为： 2.1\n5 - c 的值为： 1\n6 - c 的值为： 8\n7 - c 的值为： 2\nPython 比较运算符\n\n以下假设变量 a 为 10，变量 b 为20：\n\n运算符\t描述\t实例\n==\t等于 - 比较对象是否相等\t(a == b) 返回 False。\n!=\t不等于 - 比较两个对象是否不相等\t(a != b) 返回 True。\n>\t大于 - 返回x是否大于y\t(a > b) 返回 False。\n<\t小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。\t(a < b) 返回 True。\n>=\t大于等于 - 返回x是否大于等于y。\t(a >= b) 返回 False。\n<=\t小于等于 - 返回x是否小于等于y。\t(a <= b) 返回 True。\n\n以下实例演示了Python所有比较运算符的操作：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \na = 21\nb = 10\nc = 0\n \nif ( a == b ):\n   print (\"1 - a 等于 b\")\nelse:\n   print (\"1 - a 不等于 b\")\n \nif ( a != b ):\n   print (\"2 - a 不等于 b\")\nelse:\n   print (\"2 - a 等于 b\")\n \nif ( a < b ):\n   print (\"3 - a 小于 b\")\nelse:\n   print (\"3 - a 大于等于 b\")\n \nif ( a > b ):\n   print (\"4 - a 大于 b\")\nelse:\n   print (\"4 - a 小于等于 b\")\n \n# 修改变量 a 和 b 的值\na = 5\nb = 20\nif ( a <= b ):\n   print (\"5 - a 小于等于 b\")\nelse:\n   print (\"5 - a 大于  b\")\n \nif ( b >= a ):\n   print (\"6 - b 大于等于 a\")\nelse:\n   print (\"6 - b 小于 a\")\n\n以上实例输出结果：\n\n1 - a 不等于 b\n2 - a 不等于 b\n3 - a 大于等于 b\n4 - a 大于 b\n5 - a 小于等于 b\n6 - b 大于等于 a\nPython赋值运算符\n\n以下假设变量a为10，变量b为20：\n\n运算符\t描述\t实例\n=\t简单的赋值运算符\tc = a + b 将 a + b 的运算结果赋值为 c\n+=\t加法赋值运算符\tc += a 等效于 c = c + a\n-=\t减法赋值运算符\tc -= a 等效于 c = c - a\n*=\t乘法赋值运算符\tc *= a 等效于 c = c * a\n/=\t除法赋值运算符\tc /= a 等效于 c = c / a\n%=\t取模赋值运算符\tc %= a 等效于 c = c % a\n**=\t幂赋值运算符\tc **= a 等效于 c = c ** a\n//=\t取整除赋值运算符\tc //= a 等效于 c = c // a\n:=\t海象运算符，可在表达式内部为变量赋值。Python3.8 版本新增运算符。\t\n\n在这个示例中，赋值表达式可以避免调用 len() 两次:\n\nif (n := len(a)) > 10:\n    print(f\"List is too long ({n} elements, expected <= 10)\")\n\n以下实例演示了Python所有赋值运算符的操作：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \na = 21\nb = 10\nc = 0\n \nc = a + b\nprint (\"1 - c 的值为：\", c)\n \nc += a\nprint (\"2 - c 的值为：\", c)\n \nc *= a\nprint (\"3 - c 的值为：\", c)\n \nc /= a \nprint (\"4 - c 的值为：\", c)\n \nc = 2\nc %= a\nprint (\"5 - c 的值为：\", c)\n \nc **= a\nprint (\"6 - c 的值为：\", c)\n \nc //= a\nprint (\"7 - c 的值为：\", c)\n\n以上实例输出结果：\n\n1 - c 的值为： 31\n2 - c 的值为： 52\n3 - c 的值为： 1092\n4 - c 的值为： 52.0\n5 - c 的值为： 2\n6 - c 的值为： 2097152\n7 - c 的值为： 99864\nPython位运算符\n\n按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：\n\n下表中变量 a 为 60，b 为 13二进制格式如下：\n\na = 0011 1100\n\nb = 0000 1101\n\n-----------------\n\na&b = 0000 1100\n\na|b = 0011 1101\n\na^b = 0011 0001\n\n~a  = 1100 0011\n运算符\t描述\t实例\n&\t按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0\t(a & b) 输出结果 12 ，二进制解释： 0000 1100\n|\t按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。\t(a | b) 输出结果 61 ，二进制解释： 0011 1101\n^\t按位异或运算符：当两对应的二进位相异时，结果为1\t(a ^ b) 输出结果 49 ，二进制解释： 0011 0001\n~\t按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1\t(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。\n<<\t左移动运算符：运算数的各二进位全部左移若干位，由\"<<\"右边的数指定移动的位数，高位丢弃，低位补0。\ta << 2 输出结果 240 ，二进制解释： 1111 0000\n>>\t右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数\ta >> 2 输出结果 15 ，二进制解释： 0000 1111\n\n以下实例演示了Python所有位运算符的操作：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \na = 60            # 60 = 0011 1100 \nb = 13            # 13 = 0000 1101 \nc = 0\n \nc = a & b        # 12 = 0000 1100\nprint (\"1 - c 的值为：\", c)\n \nc = a | b        # 61 = 0011 1101 \nprint (\"2 - c 的值为：\", c)\n \nc = a ^ b        # 49 = 0011 0001\nprint (\"3 - c 的值为：\", c)\n \nc = ~a           # -61 = 1100 0011\nprint (\"4 - c 的值为：\", c)\n \nc = a << 2       # 240 = 1111 0000\nprint (\"5 - c 的值为：\", c)\n \nc = a >> 2       # 15 = 0000 1111\nprint (\"6 - c 的值为：\", c)\n\n以上实例输出结果：\n\n1 - c 的值为： 12\n2 - c 的值为： 61\n3 - c 的值为： 49\n4 - c 的值为： -61\n5 - c 的值为： 240\n6 - c 的值为： 15\nPython逻辑运算符\n\nPython语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:\n\n运算符\t逻辑表达式\t描述\t实例\nand\tx and y\t布尔\"与\" - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。\t(a and b) 返回 20。\nor\tx or y\t布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。\t(a or b) 返回 10。\nnot\tnot x\t布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。\tnot(a and b) 返回 False\n\n以上实例输出结果：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \na = 10\nb = 20\n \nif ( a and b ):\n   print (\"1 - 变量 a 和 b 都为 true\")\nelse:\n   print (\"1 - 变量 a 和 b 有一个不为 true\")\n \nif ( a or b ):\n   print (\"2 - 变量 a 和 b 都为 true，或其中一个变量为 true\")\nelse:\n   print (\"2 - 变量 a 和 b 都不为 true\")\n \n# 修改变量 a 的值\na = 0\nif ( a and b ):\n   print (\"3 - 变量 a 和 b 都为 true\")\nelse:\n   print (\"3 - 变量 a 和 b 有一个不为 true\")\n \nif ( a or b ):\n   print (\"4 - 变量 a 和 b 都为 true，或其中一个变量为 true\")\nelse:\n   print (\"4 - 变量 a 和 b 都不为 true\")\n \nif not( a and b ):\n   print (\"5 - 变量 a 和 b 都为 false，或其中一个变量为 false\")\nelse:\n   print (\"5 - 变量 a 和 b 都为 true\")\n\n以上实例输出结果：\n\n1 - 变量 a 和 b 都为 true\n2 - 变量 a 和 b 都为 true，或其中一个变量为 true\n3 - 变量 a 和 b 有一个不为 true\n4 - 变量 a 和 b 都为 true，或其中一个变量为 true\n5 - 变量 a 和 b 都为 false，或其中一个变量为 false\nPython成员运算符\n\n除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。\n\n运算符\t描述\t实例\nin\t如果在指定的序列中找到值返回 True，否则返回 False。\tx 在 y 序列中 , 如果 x 在 y 序列中返回 True。\nnot in\t如果在指定的序列中没有找到值返回 True，否则返回 False。\tx 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。\n\n以下实例演示了Python所有成员运算符的操作：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \na = 10\nb = 20\nlist = [1, 2, 3, 4, 5 ]\n \nif ( a in list ):\n   print (\"1 - 变量 a 在给定的列表中 list 中\")\nelse:\n   print (\"1 - 变量 a 不在给定的列表中 list 中\")\n \nif ( b not in list ):\n   print (\"2 - 变量 b 不在给定的列表中 list 中\")\nelse:\n   print (\"2 - 变量 b 在给定的列表中 list 中\")\n \n# 修改变量 a 的值\na = 2\nif ( a in list ):\n   print (\"3 - 变量 a 在给定的列表中 list 中\")\nelse:\n   print (\"3 - 变量 a 不在给定的列表中 list 中\")\n\n以上实例输出结果：\n\n1 - 变量 a 不在给定的列表中 list 中\n2 - 变量 b 不在给定的列表中 list 中\n3 - 变量 a 在给定的列表中 list 中\nPython身份运算符\n\n身份运算符用于比较两个对象的存储单元\n\n运算符\t描述\t实例\nis\tis 是判断两个标识符是不是引用自一个对象\tx is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False\nis not\tis not 是判断两个标识符是不是引用自不同对象\tx is not y ， 类似 id(x) != id(y)。如果引用的不是同一个对象则返回结果 True，否则返回 False。\n\n注： id() 函数用于获取对象内存地址。\n\n以下实例演示了Python所有身份运算符的操作：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \na = 20\nb = 20\n \nif ( a is b ):\n   print (\"1 - a 和 b 有相同的标识\")\nelse:\n   print (\"1 - a 和 b 没有相同的标识\")\n \nif ( id(a) == id(b) ):\n   print (\"2 - a 和 b 有相同的标识\")\nelse:\n   print (\"2 - a 和 b 没有相同的标识\")\n \n# 修改变量 b 的值\nb = 30\nif ( a is b ):\n   print (\"3 - a 和 b 有相同的标识\")\nelse:\n   print (\"3 - a 和 b 没有相同的标识\")\n \nif ( a is not b ):\n   print (\"4 - a 和 b 没有相同的标识\")\nelse:\n   print (\"4 - a 和 b 有相同的标识\")\n\n以上实例输出结果：\n\n1 - a 和 b 有相同的标识\n2 - a 和 b 有相同的标识\n3 - a 和 b 没有相同的标识\n4 - a 和 b 没有相同的标识\n\nis 与 == 区别：\n\nis 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。\n\n>>>a = [1, 2, 3]\n>>> b = a\n>>> b is a \nTrue\n>>> b == a\nTrue\n>>> b = a[:]\n>>> b is a\nFalse\n>>> b == a\nTrue\nPython运算符优先级\n\n以下表格列出了从最高到最低优先级的所有运算符， 相同单元格内的运算符具有相同优先级。 运算符均指二元运算，除非特别指出。 相同单元格内的运算符从左至右分组（除了幂运算是从右至左分组）：\n\n运算符\n\n\t\n\n描述\n\n\n\n\n(expressions...),\n\n[expressions...], {key: value...}, {expressions...}\n\n\t\n\n圆括号的表达式\n\n\n\n\nx[index], x[index:index], x(arguments...), x.attribute\n\n\t\n\n读取，切片，调用，属性引用\n\n\n\n\nawait x\n\n\t\n\nawait 表达式\n\n\n\n\n**\n\n\t\n\n乘方(指数)\n\n\n\n\n+x, -x, ~x\n\n\t\n\n正，负，按位非 NOT\n\n\n\n\n*, @, /, //, %\n\n\t\n\n乘，矩阵乘，除，整除，取余\n\n\n\n\n+, -\n\n\t\n\n加和减\n\n\n\n\n<<, >>\n\n\t\n\n移位\n\n\n\n\n&\n\n\t\n\n按位与 AND\n\n\n\n\n^\n\n\t\n\n按位异或 XOR\n\n\n\n\n|\n\n\t\n\n按位或 OR\n\n\n\n\nin,not in, is,is not, <, <=, >, >=, !=, ==\n\n\t\n\n比较运算，包括成员检测和标识号检测\n\n\n\n\nnot x\n\n\t\n\n逻辑非 NOT\n\n\n\n\nand\n\n\t\n\n逻辑与 AND\n\n\n\n\nor\n\n\t\n\n逻辑或 OR\n\n\n\n\nif -- else\n\n\t\n\n条件表达式\n\n\n\n\nlambda\n\n\t\n\nlambda 表达式\n\n\n\n\n:=\n\n\t\n\n赋值表达式\n\n以下实例演示了Python所有运算符优先级的操作：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \na = 20\nb = 10\nc = 15\nd = 5\ne = 0\n \ne = (a + b) * c / d       #( 30 * 15 ) / 5\nprint (\"(a + b) * c / d 运算结果为：\",  e)\n \ne = ((a + b) * c) / d     # (30 * 15 ) / 5\nprint (\"((a + b) * c) / d 运算结果为：\",  e)\n \ne = (a + b) * (c / d)    # (30) * (15/5)\nprint (\"(a + b) * (c / d) 运算结果为：\",  e)\n \ne = a + (b * c) / d      #  20 + (150/5)\nprint (\"a + (b * c) / d 运算结果为：\",  e)\n\n以上实例输出结果：\n\n(a + b) * c / d 运算结果为： 90.0\n((a + b) * c) / d 运算结果为： 90.0\n(a + b) * (c / d) 运算结果为： 90.0\na + (b * c) / d 运算结果为： 50.0\n\nand 拥有更高优先级:\n\n实例\nx = True\ny = False\nz = False\n \nif x or y and z:\n    print(\"yes\")\nelse:\n    print(\"no\")\n\n以上实例先计算 y and z 并返回 False ，然后 x or False 返回 True，输出结果：\n\nyes\n\n注意：Python3 已不支持 <> 运算符，可以使用 != 代替，如果你一定要使用这种比较运算符，可以使用以下的方式：\n\n>>> from __future__ import barry_as_FLUFL\n>>> 1 <> 2\nTrue\n\n课后练习\n\n Python3 注释\nPython3 数字(Number) \n16 篇笔记\n 写笔记\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}