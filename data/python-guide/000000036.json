{
	"title": "Python3 MySQL 数据库连接 – PyMySQL 驱动 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python3-mysql.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\nPython3 基础语法\nPython3 基本数据类型\nPython3 数据类型转换\nPython3 解释器\nPython3 注释\nPython3 运算符\nPython3 数字(Number)\nPython3 字符串\nPython3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\nPython3 迭代器与生成器\nPython3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\nPython3 命名空间/作用域\nPython3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\n Python3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\nPython3 XML 解析\nPython3 JSON\nPython3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python MySQL - mysql-connector 驱动\nPython3 网络编程 \nPython3 MySQL 数据库连接 - PyMySQL 驱动\n\n本文我们为大家介绍 Python3 使用 PyMySQL 连接数据库，并实现简单的增删改查。\n\n什么是 PyMySQL？\n\nPyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2 中则使用 mysqldb。\n\nPyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。\n\nPyMySQL 安装\n\n在使用 PyMySQL 之前，我们需要确保 PyMySQL 已安装。\n\nPyMySQL 下载地址：https://github.com/PyMySQL/PyMySQL。\n\n如果还未安装，我们可以使用以下命令安装最新版的 PyMySQL：\n\n$ pip3 install PyMySQL\n\n如果你的系统不支持 pip 命令，可以使用以下方式安装：\n\n1、使用 git 命令下载安装包安装(你也可以手动下载)：\n\n$ git clone https://github.com/PyMySQL/PyMySQL\n$ cd PyMySQL/\n$ python3 setup.py install\n\n2、如果需要制定版本号，可以使用 curl 命令来安装：\n\n$ # X.X 为 PyMySQL 的版本号\n$ curl -L https://github.com/PyMySQL/PyMySQL/tarball/pymysql-X.X | tar xz\n$ cd PyMySQL*\n$ python3 setup.py install\n$ # 现在你可以删除 PyMySQL* 目录\n\n注意：请确保您有root权限来安装上述模块。\n\n安装的过程中可能会出现\"ImportError: No module named setuptools\"的错误提示，意思是你没有安装setuptools，你可以访问https://pypi.python.org/pypi/setuptools 找到各个系统的安装方法。\n\nLinux 系统安装实例：\n\n$ wget https://bootstrap.pypa.io/ez_setup.py\n$ python3 ez_setup.py\n数据库连接\n\n连接数据库前，请先确认以下事项：\n\n您已经创建了数据库 TESTDB.\n在 TESTDB 数据库中您已经创建了表 EMPLOYEE\nEMPLOYEE 表字段为 FIRST_NAME, LAST_NAME, AGE, SEX 和 INCOME。\n连接数据库 TESTDB 使用的用户名为 \"testuser\"，密码为 \"test123\"，你可以可以自己设定或者直接使用 root 用户名及其密码，MySQL 数据库用户授权请使用 Grant 命令。\n在你的机子上已经安装了 Python pymysql 模块。\n如果您对 sql 语句不熟悉，可以访问我们的 SQL基础教程\n实例：\n\n以下实例链接 Mysql 的 TESTDB 数据库：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nimport pymysql\n \n# 打开数据库连接\ndb = pymysql.connect(host='localhost',\n                     user='testuser',\n                     password='test123',\n                     database='TESTDB')\n \n# 使用 cursor() 方法创建一个游标对象 cursor\ncursor = db.cursor()\n \n# 使用 execute()  方法执行 SQL 查询 \ncursor.execute(\"SELECT VERSION()\")\n \n# 使用 fetchone() 方法获取单条数据.\ndata = cursor.fetchone()\n \nprint (\"Database version : %s \" % data)\n \n# 关闭数据库连接\ndb.close()\n\n执行以上脚本输出结果如下：\n\nDatabase version : 5.5.20-log\n创建数据库表\n\n如果数据库连接存在我们可以使用execute()方法来为数据库创建表，如下所示创建表EMPLOYEE：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nimport pymysql\n \n# 打开数据库连接\ndb = pymysql.connect(host='localhost',\n                     user='testuser',\n                     password='test123',\n                     database='TESTDB')\n \n# 使用 cursor() 方法创建一个游标对象 cursor\ncursor = db.cursor()\n \n# 使用 execute() 方法执行 SQL，如果表存在则删除\ncursor.execute(\"DROP TABLE IF EXISTS EMPLOYEE\")\n \n# 使用预处理语句创建表\nsql = \"\"\"CREATE TABLE EMPLOYEE (\n         FIRST_NAME  CHAR(20) NOT NULL,\n         LAST_NAME  CHAR(20),\n         AGE INT,  \n         SEX CHAR(1),\n         INCOME FLOAT )\"\"\"\n \ncursor.execute(sql)\n \n# 关闭数据库连接\ndb.close()\n数据库插入操作\n\n以下实例使用执行 SQL INSERT 语句向表 EMPLOYEE 插入记录：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nimport pymysql\n \n# 打开数据库连接\ndb = pymysql.connect(host='localhost',\n                     user='testuser',\n                     password='test123',\n                     database='TESTDB')\n \n# 使用cursor()方法获取操作游标 \ncursor = db.cursor()\n \n# SQL 插入语句\nsql = \"\"\"INSERT INTO EMPLOYEE(FIRST_NAME,\n         LAST_NAME, AGE, SEX, INCOME)\n         VALUES ('Mac', 'Mohan', 20, 'M', 2000)\"\"\"\ntry:\n   # 执行sql语句\n   cursor.execute(sql)\n   # 提交到数据库执行\n   db.commit()\nexcept:\n   # 如果发生错误则回滚\n   db.rollback()\n \n# 关闭数据库连接\ndb.close()\n\n以上例子也可以写成如下形式：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nimport pymysql\n \n# 打开数据库连接\ndb = pymysql.connect(host='localhost',\n                     user='testuser',\n                     password='test123',\n                     database='TESTDB')\n \n# 使用cursor()方法获取操作游标 \ncursor = db.cursor()\n \n# SQL 插入语句\nsql = \"INSERT INTO EMPLOYEE(FIRST_NAME, \\\n       LAST_NAME, AGE, SEX, INCOME) \\\n       VALUES ('%s', '%s',  %s,  '%s',  %s)\" % \\\n       ('Mac', 'Mohan', 20, 'M', 2000)\ntry:\n   # 执行sql语句\n   cursor.execute(sql)\n   # 执行sql语句\n   db.commit()\nexcept:\n   # 发生错误时回滚\n   db.rollback()\n \n# 关闭数据库连接\ndb.close()\n\n以下代码使用变量向SQL语句中传递参数:\n\n..................................\nuser_id = \"test123\"\npassword = \"password\"\n\ncon.execute('insert into Login values( %s,  %s)' % \\\n             (user_id, password))\n..................................\n数据库查询操作\n\nPython查询Mysql使用 fetchone() 方法获取单条数据, 使用fetchall() 方法获取多条数据。\n\nfetchone(): 该方法获取下一个查询结果集。结果集是一个对象\nfetchall(): 接收全部的返回结果行.\nrowcount: 这是一个只读属性，并返回执行execute()方法后影响的行数。\n实例：\n\n查询EMPLOYEE表中salary（工资）字段大于1000的所有数据：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nimport pymysql\n \n# 打开数据库连接\ndb = pymysql.connect(host='localhost',\n                     user='testuser',\n                     password='test123',\n                     database='TESTDB')\n \n# 使用cursor()方法获取操作游标 \ncursor = db.cursor()\n \n# SQL 查询语句\nsql = \"SELECT * FROM EMPLOYEE \\\n       WHERE INCOME > %s\" % (1000)\ntry:\n   # 执行SQL语句\n   cursor.execute(sql)\n   # 获取所有记录列表\n   results = cursor.fetchall()\n   for row in results:\n      fname = row[0]\n      lname = row[1]\n      age = row[2]\n      sex = row[3]\n      income = row[4]\n       # 打印结果\n      print (\"fname=%s,lname=%s,age=%s,sex=%s,income=%s\" % \\\n             (fname, lname, age, sex, income ))\nexcept:\n   print (\"Error: unable to fetch data\")\n \n# 关闭数据库连接\ndb.close()\n\n以上脚本执行结果如下：\n\nfname=Mac, lname=Mohan, age=20, sex=M, income=2000\n数据库更新操作\n\n更新操作用于更新数据表的数据，以下实例将 TESTDB 表中 SEX 为 'M' 的 AGE 字段递增 1：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nimport pymysql\n \n# 打开数据库连接\ndb = pymysql.connect(host='localhost',\n                     user='testuser',\n                     password='test123',\n                     database='TESTDB')\n \n# 使用cursor()方法获取操作游标 \ncursor = db.cursor()\n \n# SQL 更新语句\nsql = \"UPDATE EMPLOYEE SET AGE = AGE + 1 WHERE SEX = '%c'\" % ('M')\ntry:\n   # 执行SQL语句\n   cursor.execute(sql)\n   # 提交到数据库执行\n   db.commit()\nexcept:\n   # 发生错误时回滚\n   db.rollback()\n \n# 关闭数据库连接\ndb.close()\n删除操作\n\n删除操作用于删除数据表中的数据，以下实例演示了删除数据表 EMPLOYEE 中 AGE 大于 20 的所有数据：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \nimport pymysql\n \n# 打开数据库连接\ndb = pymysql.connect(host='localhost',\n                     user='testuser',\n                     password='test123',\n                     database='TESTDB')\n \n# 使用cursor()方法获取操作游标 \ncursor = db.cursor()\n \n# SQL 删除语句\nsql = \"DELETE FROM EMPLOYEE WHERE AGE > %s\" % (20)\ntry:\n   # 执行SQL语句\n   cursor.execute(sql)\n   # 提交修改\n   db.commit()\nexcept:\n   # 发生错误时回滚\n   db.rollback()\n \n# 关闭连接\ndb.close()\n执行事务\n\n事务机制可以确保数据一致性。\n\n事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。\n\n原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。\n一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。\n隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。\n持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。\n\nPython DB API 2.0 的事务提供了两个方法 commit 或 rollback。\n\n实例\n实例(Python 3.0+)\n# SQL删除记录语句\nsql = \"DELETE FROM EMPLOYEE WHERE AGE > %s\" % (20)\ntry:\n   # 执行SQL语句\n   cursor.execute(sql)\n   # 向数据库提交\n   db.commit()\nexcept:\n   # 发生错误时回滚\n   db.rollback()\n\n对于支持事务的数据库， 在Python数据库编程中，当游标建立之时，就自动开始了一个隐形的数据库事务。\n\ncommit()方法游标的所有更新操作，rollback（）方法回滚当前游标的所有操作。每一个方法都开始了一个新的事务。\n\n错误处理\n\nDB API中定义了一些数据库操作的错误及异常，下表列出了这些错误和异常:\n\n异常\t描述\nWarning\t当有严重警告时触发，例如插入数据是被截断等等。必须是 StandardError 的子类。\nError\t警告以外所有其他错误类。必须是 StandardError 的子类。\nInterfaceError\t当有数据库接口模块本身的错误（而不是数据库的错误）发生时触发。 必须是Error的子类。\nDatabaseError\t和数据库有关的错误发生时触发。 必须是Error的子类。\nDataError\t当有数据处理时的错误发生时触发，例如：除零错误，数据超范围等等。 必须是DatabaseError的子类。\nOperationalError\t指非用户控制的，而是操作数据库时发生的错误。例如：连接意外断开、 数据库名未找到、事务处理失败、内存分配错误等等操作数据库是发生的错误。 必须是DatabaseError的子类。\nIntegrityError\t完整性相关的错误，例如外键检查失败等。必须是DatabaseError子类。\nInternalError\t数据库的内部错误，例如游标（cursor）失效了、事务同步失败等等。 必须是DatabaseError子类。\nProgrammingError\t程序错误，例如数据表（table）没找到或已存在、SQL语句语法错误、 参数数量错误等等。必须是DatabaseError的子类。\nNotSupportedError\t不支持错误，指使用了数据库不支持的函数或API等。例如在连接对象上 使用.rollback()函数，然而数据库并不支持事务或者事务已关闭。 必须是DatabaseError的子类。\n\n以下为异常的继承结构：\n\nException\n|__Warning\n|__Error\n   |__InterfaceError\n   |__DatabaseError\n      |__DataError\n      |__OperationalError\n      |__IntegrityError\n      |__InternalError\n      |__ProgrammingError\n      |__NotSupportedError\n Python MySQL - mysql-connector 驱动\nPython3 网络编程 \n3 篇笔记\n 写笔记\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}