{
	"title": "Python MySQL – mysql-connector 驱动 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python-mysql-connector.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\nPython3 基础语法\nPython3 基本数据类型\nPython3 数据类型转换\nPython3 解释器\nPython3 注释\nPython3 运算符\nPython3 数字(Number)\nPython3 字符串\nPython3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\nPython3 迭代器与生成器\nPython3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\nPython3 命名空间/作用域\nPython3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\nPython3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\nPython3 XML 解析\nPython3 JSON\nPython3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python3 CGI编程\nPython3 MySQL 数据库连接 – PyMySQL 驱动 \nPython MySQL - mysql-connector 驱动\n\nMySQL 是最流行的关系型数据库管理系统，如果你不熟悉 MySQL，可以阅读我们的 MySQL 教程。\n\n本章节我们为大家介绍使用 mysql-connector 来连接使用 MySQL， mysql-connector 是 MySQL 官方提供的驱动器。\n\n我们可以使用 pip 命令来安装 mysql-connector：\n\npython -m pip install mysql-connector\n\n使用以下代码测试 mysql-connector 是否安装成功：\n\ndemo_mysql_test.py:\nimport mysql.connector\n\n执行以上代码，如果没有产生错误，表明安装成功。\n\n注意：如果你的 MySQL 是 8.0 版本，密码插件验证方式发生了变化，早期版本为 mysql_native_password，8.0 版本为 caching_sha2_password，所以需要做些改变：\n\n先修改 my.ini 配置：\n\n[mysqld]\ndefault_authentication_plugin=mysql_native_password\n\n然后在 mysql 下执行以下命令来修改密码：\n\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '新密码';\n\n更多内容可以参考：Python MySQL8.0 链接问题。\n\n创建数据库连接\n\n可以使用以下代码来连接数据库：\n\ndemo_mysql_test.py:\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",       # 数据库主机地址\n  user=\"yourusername\",    # 数据库用户名\n  passwd=\"yourpassword\"   # 数据库密码\n)\n \nprint(mydb)\n创建数据库\n\n创建数据库使用 \"CREATE DATABASE\" 语句，以下创建一个名为 runoob_db 的数据库：\n\ndemo_mysql_test.py:\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\"\n)\n \nmycursor = mydb.cursor()\n \nmycursor.execute(\"CREATE DATABASE runoob_db\")\n\n创建数据库前我们也可以使用 \"SHOW DATABASES\" 语句来查看数据库是否存在：\n\ndemo_mysql_test.py:\n\n输出所有数据库列表：\n\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\"\n)\n \nmycursor = mydb.cursor()\n \nmycursor.execute(\"SHOW DATABASES\")\n \nfor x in mycursor:\n  print(x)\n\n或者我们可以直接连接数据库，如果数据库不存在，会输出错误信息：\n\ndemo_mysql_test.py:\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\n创建数据表\n\n创建数据表使用 \"CREATE TABLE\" 语句，创建数据表前，需要确保数据库已存在，以下创建一个名为 sites 的数据表：\n\ndemo_mysql_test.py:\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nmycursor.execute(\"CREATE TABLE sites (name VARCHAR(255), url VARCHAR(255))\")\n执行成功后，我们可以看到数据库创建的数据表 sites，字段为 name 和 url。\n\n我们也可以使用 \"SHOW TABLES\" 语句来查看数据表是否已存在：\ndemo_mysql_test.py:\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nmycursor.execute(\"SHOW TABLES\")\n \nfor x in mycursor:\n  print(x)\n主键设置\n\n创建表的时候我们一般都会设置一个主键（PRIMARY KEY），我们可以使用 \"INT AUTO_INCREMENT PRIMARY KEY\" 语句来创建一个主键，主键起始值为 1，逐步递增。\n\n如果我们的表已经创建，我们需要使用 ALTER TABLE 来给表添加主键：\n\ndemo_mysql_test.py:\n\n给 sites 表添加主键。\n\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nmycursor.execute(\"ALTER TABLE sites ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY\")\n\n如果你还未创建 sites 表，可以直接使用以下代码创建。\n\ndemo_mysql_test.py:\n\n给表创建主键。\n\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nmycursor.execute(\"CREATE TABLE sites (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), url VARCHAR(255))\")\n插入数据\n\n插入数据使用 \"INSERT INTO\" 语句：\n\ndemo_mysql_test.py:\n\n向 sites 表插入一条记录。\n\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nsql = \"INSERT INTO sites (name, url) VALUES (%s, %s)\"\nval = (\"RUNOOB\", \"https://www.runoob.com\")\nmycursor.execute(sql, val)\n \nmydb.commit()    # 数据表内容有更新，必须使用到该语句\n \nprint(mycursor.rowcount, \"记录插入成功。\")\n\n执行代码，输出结果为：\n\n1 记录插入成功\n批量插入\n\n批量插入使用 executemany() 方法，该方法的第二个参数是一个元组列表，包含了我们要插入的数据：\n\ndemo_mysql_test.py:\n\n向 sites 表插入多条记录。\n\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nsql = \"INSERT INTO sites (name, url) VALUES (%s, %s)\"\nval = [\n  ('Google', 'https://www.google.com'),\n  ('Github', 'https://www.github.com'),\n  ('Taobao', 'https://www.taobao.com'),\n  ('stackoverflow', 'https://www.stackoverflow.com/')\n]\n \nmycursor.executemany(sql, val)\n \nmydb.commit()    # 数据表内容有更新，必须使用到该语句\n \nprint(mycursor.rowcount, \"记录插入成功。\")\n\n执行代码，输出结果为：\n\n4 记录插入成功。\n\n执行以上代码后，我们可以看看数据表的记录：\n\n如果我们想在数据记录插入后，获取该记录的 ID ，可以使用以下代码：\n\ndemo_mysql_test.py:\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nsql = \"INSERT INTO sites (name, url) VALUES (%s, %s)\"\nval = (\"Zhihu\", \"https://www.zhihu.com\")\nmycursor.execute(sql, val)\n \nmydb.commit()\n \nprint(\"1 条记录已插入, ID:\", mycursor.lastrowid)\n\n执行代码，输出结果为：\n\n1 条记录已插入, ID: 6\n查询数据\n\n查询数据使用 SELECT 语句：\n\ndemo_mysql_test.py:\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nmycursor.execute(\"SELECT * FROM sites\")\n \nmyresult = mycursor.fetchall()     # fetchall() 获取所有记录\n \nfor x in myresult:\n  print(x)\n\n执行代码，输出结果为：\n\n(1, 'RUNOOB', 'https://www.runoob.com')\n(2, 'Google', 'https://www.google.com')\n(3, 'Github', 'https://www.github.com')\n(4, 'Taobao', 'https://www.taobao.com')\n(5, 'stackoverflow', 'https://www.stackoverflow.com/')\n(6, 'Zhihu', 'https://www.zhihu.com')\n\n也可以读取指定的字段数据：\n\ndemo_mysql_test.py:\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nmycursor.execute(\"SELECT name, url FROM sites\")\n \nmyresult = mycursor.fetchall()\n \nfor x in myresult:\n  print(x)\n\n执行代码，输出结果为：\n\n('RUNOOB', 'https://www.runoob.com')\n('Google', 'https://www.google.com')\n('Github', 'https://www.github.com')\n('Taobao', 'https://www.taobao.com')\n('stackoverflow', 'https://www.stackoverflow.com/')\n('Zhihu', 'https://www.zhihu.com')\n\n如果我们只想读取一条数据，可以使用 fetchone() 方法：\n\ndemo_mysql_test.py:\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nmycursor.execute(\"SELECT * FROM sites\")\n \nmyresult = mycursor.fetchone()\n \nprint(myresult)\n\n执行代码，输出结果为：\n\n(1, 'RUNOOB', 'https://www.runoob.com')\nwhere 条件语句\n\n如果我们要读取指定条件的数据，可以使用 where 语句：\n\ndemo_mysql_test.py\n\n读取 name 字段为 RUNOOB 的记录：\n\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nsql = \"SELECT * FROM sites WHERE name ='RUNOOB'\"\n \nmycursor.execute(sql)\n \nmyresult = mycursor.fetchall()\n \nfor x in myresult:\n  print(x)\n\n执行代码，输出结果为：\n\n(1, 'RUNOOB', 'https://www.runoob.com')\n\n也可以使用通配符 %：\n\ndemo_mysql_test.py\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nsql = \"SELECT * FROM sites WHERE url LIKE '%oo%'\"\n \nmycursor.execute(sql)\n \nmyresult = mycursor.fetchall()\n \nfor x in myresult:\n  print(x)\n\n执行代码，输出结果为：\n\n(1, 'RUNOOB', 'https://www.runoob.com')\n(2, 'Google', 'https://www.google.com')\n\n为了防止数据库查询发生 SQL 注入的攻击，我们可以使用 %s 占位符来转义查询的条件：\n\ndemo_mysql_test.py\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nsql = \"SELECT * FROM sites WHERE name = %s\"\nna = (\"RUNOOB\", )\n \nmycursor.execute(sql, na)\n \nmyresult = mycursor.fetchall()\n \nfor x in myresult:\n  print(x)\n排序\n\n查询结果排序可以使用 ORDER BY 语句，默认的排序方式为升序，关键字为 ASC，如果要设置降序排序，可以设置关键字 DESC。\n\ndemo_mysql_test.py\n\n按 name 字段字母的升序排序：\n\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nsql = \"SELECT * FROM sites ORDER BY name\"\n \nmycursor.execute(sql)\n \nmyresult = mycursor.fetchall()\n \nfor x in myresult:\n  print(x)\n\n执行代码，输出结果为：\n\n(3, 'Github', 'https://www.github.com')\n(2, 'Google', 'https://www.google.com')\n(1, 'RUNOOB', 'https://www.runoob.com')\n(5, 'stackoverflow', 'https://www.stackoverflow.com/')\n(4, 'Taobao', 'https://www.taobao.com')\n(6, 'Zhihu', 'https://www.zhihu.com')\n\n降序排序实例：\n\ndemo_mysql_test.py\n\n按 name 字段字母的降序排序：\n\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nsql = \"SELECT * FROM sites ORDER BY name DESC\"\n \nmycursor.execute(sql)\n \nmyresult = mycursor.fetchall()\n \nfor x in myresult:\n  print(x)\n\n执行代码，输出结果为：\n\n(6, 'Zhihu', 'https://www.zhihu.com')\n(4, 'Taobao', 'https://www.taobao.com')\n(5, 'stackoverflow', 'https://www.stackoverflow.com/')\n(1, 'RUNOOB', 'https://www.runoob.com')\n(2, 'Google', 'https://www.google.com')\n(3, 'Github', 'https://www.github.com')\nLimit\n\n如果我们要设置查询的数据量，可以通过 \"LIMIT\" 语句来指定\n\ndemo_mysql_test.py\n\n读取前 3 条记录：\n\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nmycursor.execute(\"SELECT * FROM sites LIMIT 3\")\n \nmyresult = mycursor.fetchall()\n \nfor x in myresult:\n  print(x)\n\n执行代码，输出结果为：\n\n(1, 'RUNOOB', 'https://www.runoob.com')\n(2, 'Google', 'https://www.google.com')\n(3, 'Github', 'https://www.github.com')\n\n也可以指定起始位置，使用的关键字是 OFFSET：\n\ndemo_mysql_test.py\n\n从第二条开始读取前 3 条记录：\n\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nmycursor.execute(\"SELECT * FROM sites LIMIT 3 OFFSET 1\")  # 0 为 第一条，1 为第二条，以此类推\n \nmyresult = mycursor.fetchall()\n \nfor x in myresult:\n  print(x)\n\n执行代码，输出结果为：\n\n(2, 'Google', 'https://www.google.com')\n(3, 'Github', 'https://www.github.com')\n(4, 'Taobao', 'https://www.taobao.com')\n删除记录\n\n删除记录使用 \"DELETE FROM\" 语句：\n\ndemo_mysql_test.py\n\n删除 name 为 stackoverflow 的记录：\n\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nsql = \"DELETE FROM sites WHERE name = 'stackoverflow'\"\n \nmycursor.execute(sql)\n \nmydb.commit()\n \nprint(mycursor.rowcount, \" 条记录删除\")\n\n执行代码，输出结果为：\n\n1  条记录删除\n\n注意：要慎重使用删除语句，删除语句要确保指定了 WHERE 条件语句，否则会导致整表数据被删除。\n\n为了防止数据库查询发生 SQL 注入的攻击，我们可以使用 %s 占位符来转义删除语句的条件：\n\ndemo_mysql_test.py\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nsql = \"DELETE FROM sites WHERE name = %s\"\nna = (\"stackoverflow\", )\n \nmycursor.execute(sql, na)\n \nmydb.commit()\n \nprint(mycursor.rowcount, \" 条记录删除\")\n\n执行代码，输出结果为：\n\n1  条记录删除\n更新表数据\n\n数据表更新使用 \"UPDATE\" 语句：\n\ndemo_mysql_test.py\n\n将 name 为 Zhihu 的字段数据改为 ZH：\n\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nsql = \"UPDATE sites SET name = 'ZH' WHERE name = 'Zhihu'\"\n \nmycursor.execute(sql)\n \nmydb.commit()\n \nprint(mycursor.rowcount, \" 条记录被修改\")\n\n执行代码，输出结果为：\n\n1  条记录被修改\n\n注意：UPDATE 语句要确保指定了 WHERE 条件语句，否则会导致整表数据被更新。\n\n为了防止数据库查询发生 SQL 注入的攻击，我们可以使用 %s 占位符来转义更新语句的条件：\n\ndemo_mysql_test.py\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nsql = \"UPDATE sites SET name = %s WHERE name = %s\"\nval = (\"Zhihu\", \"ZH\")\n \nmycursor.execute(sql, val)\n \nmydb.commit()\n \nprint(mycursor.rowcount, \" 条记录被修改\")\n\n执行代码，输出结果为：\n\n1  条记录被修改\n删除表\n\n删除表使用 \"DROP TABLE\" 语句， IF EXISTS 关键字是用于判断表是否存在，只有在存在的情况才删除：\n\ndemo_mysql_test.py\nimport mysql.connector\n \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"123456\",\n  database=\"runoob_db\"\n)\nmycursor = mydb.cursor()\n \nsql = \"DROP TABLE IF EXISTS sites\"  # 删除数据表 sites\n \nmycursor.execute(sql)\n Python3 CGI编程\nPython3 MySQL 数据库连接 – PyMySQL 驱动 \n3 篇笔记\n 写笔记\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}