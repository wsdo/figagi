{
	"title": "Python3 函数 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python3-function.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\nPython3 基础语法\nPython3 基本数据类型\nPython3 数据类型转换\nPython3 解释器\nPython3 注释\nPython3 运算符\nPython3 数字(Number)\nPython3 字符串\nPython3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\nPython3 迭代器与生成器\n Python3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\nPython3 命名空间/作用域\nPython3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\nPython3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\nPython3 XML 解析\nPython3 JSON\nPython3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python3 迭代器与生成器\nPython3 lambda（匿名函数） \nPython3 函数\n\n函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。\n\n函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。\n\n定义一个函数\n\n你可以定义一个由自己想要功能的函数，以下是简单的规则：\n\n函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。\n任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。\n函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。\n函数内容以冒号 : 起始，并且缩进。\nreturn [表达式] 结束函数，选择性地返回一个值给调用方，不带表达式的 return 相当于返回 None。\n\n语法\n\nPython 定义函数使用 def 关键字，一般格式如下：\n\ndef 函数名（参数列表）:\n    函数体\n\n默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。\n\n实例\n\n让我们使用函数来输出\"Hello World！\"：\n\n#!/usr/bin/python3\n\ndef hello() :\n    print(\"Hello World!\")\n\nhello()\n\n\n更复杂点的应用，函数中带上参数变量:\n\n实例(Python 3.0+)\n\n比较两个数，并返回较大的数:\n\n#!/usr/bin/python3\n \ndef max(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n \na = 4\nb = 5\nprint(max(a, b))\n\n以上实例输出结果：\n\n5\n实例(Python 3.0+)\n\n计算面积函数:\n\n#!/usr/bin/python3\n \n# 计算面积函数\ndef area(width, height):\n    return width * height\n \ndef print_welcome(name):\n    print(\"Welcome\", name)\n \nprint_welcome(\"Runoob\")\nw = 4\nh = 5\nprint(\"width =\", w, \" height =\", h, \" area =\", area(w, h))\n\n以上实例输出结果：\n\nWelcome Runoob\nwidth = 4  height = 5  area = 20\n函数调用\n\n定义一个函数：给了函数一个名称，指定了函数里包含的参数，和代码块结构。\n\n这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从 Python 命令提示符执行。\n\n如下实例调用了 printme() 函数：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \n# 定义函数\ndef printme( str ):\n   # 打印任何传入的字符串\n   print (str)\n   return\n \n# 调用函数\nprintme(\"我要调用用户自定义函数!\")\nprintme(\"再次调用同一函数\")\n\n以上实例输出结果：\n\n我要调用用户自定义函数!\n再次调用同一函数\n参数传递\n\n在 python 中，类型属于对象，对象有不同类型的区分，变量是没有类型的：\n\na=[1,2,3]\n\na=\"Runoob\"\n\n以上代码中，[1,2,3] 是 List 类型，\"Runoob\" 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。\n\n可更改(mutable)与不可更改(immutable)对象\n\n在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。\n\n不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a。\n\n可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。\n\npython 函数的参数传递：\n\n不可变类型：类似 C++ 的值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。\n\n可变类型：类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响\n\npython 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。\n\npython 传不可变对象实例\n\n通过 id() 函数来查看内存地址变化：\n\n实例(Python 3.0+)\ndef change(a):\n    print(id(a))   # 指向的是同一个对象\n    a=10\n    print(id(a))   # 一个新对象\n \na=1\nprint(id(a))\nchange(a)\n\n以上实例输出结果为：\n\n4379369136\n4379369136\n4379369424\n\n可以看见在调用函数前后，形参和实参指向的是同一个对象（对象 id 相同），在函数内部修改形参后，形参指向的是不同的 id。\n\n传可变对象实例\n\n可变对象在函数里修改了参数，那么在调用这个函数的函数里，原始的参数也被改变了。例如：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \n# 可写函数说明\ndef changeme( mylist ):\n   \"修改传入的列表\"\n   mylist.append([1,2,3,4])\n   print (\"函数内取值: \", mylist)\n   return\n \n# 调用changeme函数\nmylist = [10,20,30]\nchangeme( mylist )\nprint (\"函数外取值: \", mylist)\n\n传入函数的和在末尾添加新内容的对象用的是同一个引用。故输出结果如下：\n\n函数内取值:  [10, 20, 30, [1, 2, 3, 4]]\n函数外取值:  [10, 20, 30, [1, 2, 3, 4]]\n参数\n\n以下是调用函数时可使用的正式参数类型：\n\n必需参数\n关键字参数\n默认参数\n不定长参数\n必需参数\n\n必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。\n\n调用 printme() 函数，你必须传入一个参数，不然会出现语法错误：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \n#可写函数说明\ndef printme( str ):\n   \"打印任何传入的字符串\"\n   print (str)\n   return\n \n# 调用 printme 函数，不加参数会报错\nprintme()\n\n以上实例输出结果：\n\nTraceback (most recent call last):\n  File \"test.py\", line 10, in <module>\n    printme()\nTypeError: printme() missing 1 required positional argument: 'str'\n关键字参数\n\n关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。\n\n使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。\n\n以下实例在函数 printme() 调用时使用参数名：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \n#可写函数说明\ndef printme( str ):\n   \"打印任何传入的字符串\"\n   print (str)\n   return\n \n#调用printme函数\nprintme( str = \"菜鸟教程\")\n\n以上实例输出结果：\n\n菜鸟教程\n\n以下实例中演示了函数参数的使用不需要使用指定顺序：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \n#可写函数说明\ndef printinfo( name, age ):\n   \"打印任何传入的字符串\"\n   print (\"名字: \", name)\n   print (\"年龄: \", age)\n   return\n \n#调用printinfo函数\nprintinfo( age=50, name=\"runoob\" )\n\n以上实例输出结果：\n\n名字:  runoob\n年龄:  50\n默认参数\n\n调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \n#可写函数说明\ndef printinfo( name, age = 35 ):\n   \"打印任何传入的字符串\"\n   print (\"名字: \", name)\n   print (\"年龄: \", age)\n   return\n \n#调用printinfo函数\nprintinfo( age=50, name=\"runoob\" )\nprint (\"------------------------\")\nprintinfo( name=\"runoob\" )\n\n以上实例输出结果：\n\n名字:  runoob\n年龄:  50\n------------------------\n名字:  runoob\n年龄:  35\n不定长参数\n\n你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下：\n\ndef functionname([formal_args,] *var_args_tuple ):\n   \"函数_文档字符串\"\n   function_suite\n   return [expression]\n\n加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n  \n# 可写函数说明\ndef printinfo( arg1, *vartuple ):\n   \"打印任何传入的参数\"\n   print (\"输出: \")\n   print (arg1)\n   print (vartuple)\n \n# 调用printinfo 函数\nprintinfo( 70, 60, 50 )\n\n以上实例输出结果：\n\n输出: \n70\n(60, 50)\n\n如果在函数调用时没有指定参数，它就是一个空元组。我们也可以不向函数传递未命名的变量。如下实例：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \n# 可写函数说明\ndef printinfo( arg1, *vartuple ):\n   \"打印任何传入的参数\"\n   print (\"输出: \")\n   print (arg1)\n   for var in vartuple:\n      print (var)\n   return\n \n# 调用printinfo 函数\nprintinfo( 10 )\nprintinfo( 70, 60, 50 )\n\n以上实例输出结果：\n\n输出:\n10\n输出:\n70\n60\n50\n\n还有一种就是参数带两个星号 **基本语法如下：\n\ndef functionname([formal_args,] **var_args_dict ):\n   \"函数_文档字符串\"\n   function_suite\n   return [expression]\n\n加了两个星号 ** 的参数会以字典的形式导入。\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n  \n# 可写函数说明\ndef printinfo( arg1, **vardict ):\n   \"打印任何传入的参数\"\n   print (\"输出: \")\n   print (arg1)\n   print (vardict)\n \n# 调用printinfo 函数\nprintinfo(1, a=2,b=3)\n\n以上实例输出结果：\n\n输出: \n1\n{'a': 2, 'b': 3}\n\n声明函数时，参数中星号 * 可以单独出现，例如:\n\ndef f(a,b,*,c):\n    return a+b+c\n\n如果单独出现星号 *，则星号 * 后的参数必须用关键字传入：\n\n>>> def f(a,b,*,c):\n...     return a+b+c\n... \n>>> f(1,2,3)   # 报错\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: f() takes 2 positional arguments but 3 were given\n>>> f(1,2,c=3) # 正常\n6\n>>>\n匿名函数\n\nPython 使用 lambda 来创建匿名函数。\n\n所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。\n\nlambda 只是一个表达式，函数体比 def 简单很多。\nlambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去。\nlambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。\n虽然 lambda 函数看起来只能写一行，却不等同于 C 或 C++ 的内联函数，内联函数的目的是调用小函数时不占用栈内存从而减少函数调用的开销，提高代码的执行速度。\n语法\n\nlambda 函数的语法只包含一个语句，如下：\n\nlambda [arg1 [,arg2,.....argn]]:expression\n\n设置参数 a 加上 10:\n\n实例\nx = lambda a : a + 10\nprint(x(5))\n\n以上实例输出结果：\n\n15\n\n以下实例匿名函数设置两个参数：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \n# 可写函数说明\nsum = lambda arg1, arg2: arg1 + arg2\n \n# 调用sum函数\nprint (\"相加后的值为 : \", sum( 10, 20 ))\nprint (\"相加后的值为 : \", sum( 20, 20 ))\n\n以上实例输出结果：\n\n相加后的值为 :  30\n相加后的值为 :  40\n\n我们可以将匿名函数封装在一个函数内，这样可以使用同样的代码来创建多个匿名函数。\n\n以下实例将匿名函数封装在 myfunc 函数中，通过传入不同的参数来创建不同的匿名函数：\n\n实例\ndef myfunc(n):\n  return lambda a : a * n\n \nmydoubler = myfunc(2)\nmytripler = myfunc(3)\n \nprint(mydoubler(11))\nprint(mytripler(11))\n\n以上实例输出结果：\n\n22\n33\n\n更多匿名函数还可以参考：Python lambda（匿名函数）\n\nreturn 语句\n\nreturn [表达式] 语句用于退出函数，选择性地向调用方返回一个表达式。不带参数值的 return 语句返回 None。之前的例子都没有示范如何返回数值，以下实例演示了 return 语句的用法：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n \n# 可写函数说明\ndef sum( arg1, arg2 ):\n   # 返回2个参数的和.\"\n   total = arg1 + arg2\n   print (\"函数内 : \", total)\n   return total\n \n# 调用sum函数\ntotal = sum( 10, 20 )\nprint (\"函数外 : \", total)\n\n以上实例输出结果：\n\n函数内 :  30\n函数外 :  30\n强制位置参数\n\nPython3.8 新增了一个函数形参语法 / 用来指明函数形参必须使用指定位置参数，不能使用关键字参数的形式。\n\n在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参:\ndef f(a, b, /, c, d, *, e, f):\n    print(a, b, c, d, e, f)\n\n以下使用方法是正确的:\n\nf(10, 20, 30, d=40, e=50, f=60)\n\n以下使用方法会发生错误:\n\nf(10, b=20, c=30, d=40, e=50, f=60)   # b 不能使用关键字参数的形式\nf(10, 20, 30, 40, 50, f=60)           # e 必须使用关键字参数的形式\n\n课后练习\n\n Python3 迭代器与生成器\nPython3 lambda（匿名函数） \n20 篇笔记\n 写笔记\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}