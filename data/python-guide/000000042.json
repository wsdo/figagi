{
	"title": "Python3 XML 解析 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python3-xml-processing.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\nPython3 基础语法\nPython3 基本数据类型\nPython3 数据类型转换\nPython3 解释器\nPython3 注释\nPython3 运算符\nPython3 数字(Number)\nPython3 字符串\nPython3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\nPython3 迭代器与生成器\nPython3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\nPython3 命名空间/作用域\nPython3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\nPython3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\n Python3 XML 解析\nPython3 JSON\nPython3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python3 多线程\nPython3 JSON 数据解析 \nPython3 XML 解析\n什么是 XML？\n\nXML 指可扩展标记语言（eXtensible Markup Language），标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。 你可以通过本站学习 XML 教程\n\nXML 被设计用来传输和存储数据。\n\nXML 是一套定义语义标记的规则，这些标记将文档分成许多部件并对这些部件加以标识。\n\n它也是元标记语言，即定义了用于定义其他与特定领域有关的、语义的、结构化的标记语言的句法语言。\n\nPython 对 XML 的解析\n\n常见的 XML 编程接口有 DOM 和 SAX，这两种接口处理 XML 文件的方式不同，当然使用场合也不同。\n\nPython 有三种方法解析 XML，SAX，DOM，以及 ElementTree:\n\n1.SAX (simple API for XML )\n\nPython 标准库包含 SAX 解析器，SAX 用事件驱动模型，通过在解析 XML 的过程中触发一个个的事件并调用用户定义的回调函数来处理 XML 文件。\n\n2.DOM(Document Object Model)\n\n将 XML 数据在内存中解析成一个树，通过对树的操作来操作 XML。\n\n本章节使用到的 XML 实例文件 movies.xml 内容如下：\n\n实例\n<collection shelf=\"New Arrivals\">\n<movie title=\"Enemy Behind\">\n   <type>War, Thriller</type>\n   <format>DVD</format>\n   <year>2003</year>\n   <rating>PG</rating>\n   <stars>10</stars>\n   <description>Talk about a US-Japan war</description>\n</movie>\n<movie title=\"Transformers\">\n   <type>Anime, Science Fiction</type>\n   <format>DVD</format>\n   <year>1989</year>\n   <rating>R</rating>\n   <stars>8</stars>\n   <description>A schientific fiction</description>\n</movie>\n   <movie title=\"Trigun\">\n   <type>Anime, Action</type>\n   <format>DVD</format>\n   <episodes>4</episodes>\n   <rating>PG</rating>\n   <stars>10</stars>\n   <description>Vash the Stampede!</description>\n</movie>\n<movie title=\"Ishtar\">\n   <type>Comedy</type>\n   <format>VHS</format>\n   <rating>PG</rating>\n   <stars>2</stars>\n   <description>Viewable boredom</description>\n</movie>\n</collection>\n\nPython 使用 SAX 解析 xml\n\nSAX 是一种基于事件驱动的API。\n\n利用 SAX 解析 XML 文档牵涉到两个部分: 解析器和事件处理器。\n\n解析器负责读取 XML 文档，并向事件处理器发送事件，如元素开始跟元素结束事件。\n\n而事件处理器则负责对事件作出响应，对传递的 XML 数据进行处理。\n\n1、对大型文件进行处理；\n2、只需要文件的部分内容，或者只需从文件中得到特定信息。\n3、想建立自己的对象模型的时候。\n\n在 Python 中使用 sax 方式处理 xml 要先引入 xml.sax 中的 parse 函数，还有 xml.sax.handler 中的 ContentHandler。\n\nContentHandler 类方法介绍\n\ncharacters(content) 方法\n\n调用时机：\n\n从行开始，遇到标签之前，存在字符，content 的值为这些字符串。\n\n从一个标签，遇到下一个标签之前， 存在字符，content 的值为这些字符串。\n\n从一个标签，遇到行结束符之前，存在字符，content 的值为这些字符串。\n\n标签可以是开始标签，也可以是结束标签。\n\nstartDocument() 方法\n\n文档启动的时候调用。\n\nendDocument() 方法\n\n解析器到达文档结尾时调用。\n\nstartElement(name, attrs) 方法\n\n遇到XML开始标签时调用，name 是标签的名字，attrs 是标签的属性值字典。\n\nendElement(name) 方法\n\n遇到XML结束标签时调用。\n\nmake_parser 方法\n\n以下方法创建一个新的解析器对象并返回。\n\nxml.sax.make_parser( [parser_list] )\n\n参数说明:\n\nparser_list - 可选参数，解析器列表\nparser 方法\n\n以下方法创建一个 SAX 解析器并解析xml文档：\n\nxml.sax.parse( xmlfile, contenthandler[, errorhandler])\n\n参数说明:\n\nxmlfile - xml文件名\ncontenthandler - 必须是一个 ContentHandler 的对象\nerrorhandler - 如果指定该参数，errorhandler 必须是一个 SAX ErrorHandler 对象\nparseString 方法\n\nparseString 方法创建一个 XML 解析器并解析 xml 字符串：\n\nxml.sax.parseString(xmlstring, contenthandler[, errorhandler])\n\n参数说明:\n\nxmlstring - xml字符串\ncontenthandler - 必须是一个 ContentHandler 的对象\nerrorhandler - 如果指定该参数，errorhandler 必须是一个 SAX ErrorHandler对象\nPython 解析XML实例\n实例\n#!/usr/bin/python3\n\nimport xml.sax\n\nclass MovieHandler( xml.sax.ContentHandler ):\n   def __init__(self):\n      self.CurrentData = \"\"\n      self.type = \"\"\n      self.format = \"\"\n      self.year = \"\"\n      self.rating = \"\"\n      self.stars = \"\"\n      self.description = \"\"\n\n   # 元素开始调用\n   def startElement(self, tag, attributes):\n      self.CurrentData = tag\n      if tag == \"movie\":\n         print (\"*****Movie*****\")\n         title = attributes[\"title\"]\n         print (\"Title:\", title)\n\n   # 元素结束调用\n   def endElement(self, tag):\n      if self.CurrentData == \"type\":\n         print (\"Type:\", self.type)\n      elif self.CurrentData == \"format\":\n         print (\"Format:\", self.format)\n      elif self.CurrentData == \"year\":\n         print (\"Year:\", self.year)\n      elif self.CurrentData == \"rating\":\n         print (\"Rating:\", self.rating)\n      elif self.CurrentData == \"stars\":\n         print (\"Stars:\", self.stars)\n      elif self.CurrentData == \"description\":\n         print (\"Description:\", self.description)\n      self.CurrentData = \"\"\n\n   # 读取字符时调用\n   def characters(self, content):\n      if self.CurrentData == \"type\":\n         self.type = content\n      elif self.CurrentData == \"format\":\n         self.format = content\n      elif self.CurrentData == \"year\":\n         self.year = content\n      elif self.CurrentData == \"rating\":\n         self.rating = content\n      elif self.CurrentData == \"stars\":\n         self.stars = content\n      elif self.CurrentData == \"description\":\n         self.description = content\n \nif ( __name__ == \"__main__\"):\n   \n   # 创建一个 XMLReader\n   parser = xml.sax.make_parser()\n   # 关闭命名空间\n   parser.setFeature(xml.sax.handler.feature_namespaces, 0)\n\n   # 重写 ContextHandler\n   Handler = MovieHandler()\n   parser.setContentHandler( Handler )\n   \n   parser.parse(\"movies.xml\")\n\n\n以上代码执行结果如下：\n\n*****Movie*****\nTitle: Enemy Behind\nType: War, Thriller\nFormat: DVD\nYear: 2003\nRating: PG\nStars: 10\nDescription: Talk about a US-Japan war\n*****Movie*****\nTitle: Transformers\nType: Anime, Science Fiction\nFormat: DVD\nYear: 1989\nRating: R\nStars: 8\nDescription: A schientific fiction\n*****Movie*****\nTitle: Trigun\nType: Anime, Action\nFormat: DVD\nRating: PG\nStars: 10\nDescription: Vash the Stampede!\n*****Movie*****\nTitle: Ishtar\nType: Comedy\nFormat: VHS\nRating: PG\nStars: 2\nDescription: Viewable boredom\n\n完整的 SAX API 文档请查阅Python SAX APIs\n\n使用xml.dom解析xml\n\n文件对象模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展置标语言的标准编程接口。\n\n一个 DOM 的解析器在解析一个 XML 文档时，一次性读取整个文档，把文档中所有元素保存在内存中的一个树结构里，之后你可以利用DOM 提供的不同的函数来读取或修改文档的内容和结构，也可以把修改过的内容写入xml文件。\n\nPython 中用 xml.dom.minidom 来解析 xml 文件，实例如下：\n\n实例\n#!/usr/bin/python3\n\nfrom xml.dom.minidom import parse\nimport xml.dom.minidom\n\n# 使用minidom解析器打开 XML 文档\nDOMTree = xml.dom.minidom.parse(\"movies.xml\")\ncollection = DOMTree.documentElement\nif collection.hasAttribute(\"shelf\"):\n   print (\"Root element : %s\" % collection.getAttribute(\"shelf\"))\n\n# 在集合中获取所有电影\nmovies = collection.getElementsByTagName(\"movie\")\n\n# 打印每部电影的详细信息\nfor movie in movies:\n   print (\"*****Movie*****\")\n   if movie.hasAttribute(\"title\"):\n      print (\"Title: %s\" % movie.getAttribute(\"title\"))\n\n   type = movie.getElementsByTagName('type')[0]\n   print (\"Type: %s\" % type.childNodes[0].data)\n   format = movie.getElementsByTagName('format')[0]\n   print (\"Format: %s\" % format.childNodes[0].data)\n   rating = movie.getElementsByTagName('rating')[0]\n   print (\"Rating: %s\" % rating.childNodes[0].data)\n   description = movie.getElementsByTagName('description')[0]\n   print (\"Description: %s\" % description.childNodes[0].data)\n\n\n以上程序执行结果如下：\n\nRoot element : New Arrivals\n*****Movie*****\nTitle: Enemy Behind\nType: War, Thriller\nFormat: DVD\nRating: PG\nDescription: Talk about a US-Japan war\n*****Movie*****\nTitle: Transformers\nType: Anime, Science Fiction\nFormat: DVD\nRating: R\nDescription: A schientific fiction\n*****Movie*****\nTitle: Trigun\nType: Anime, Action\nFormat: DVD\nRating: PG\nDescription: Vash the Stampede!\n*****Movie*****\nTitle: Ishtar\nType: Comedy\nFormat: VHS\nRating: PG\nDescription: Viewable boredom\n\n完整的 DOM API 文档请查阅Python DOM APIs。\n\n Python3 多线程\nPython3 JSON 数据解析 \n 点我分享笔记\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}