{
	"title": "Python3 基本数据类型 | 菜鸟教程",
	"url": "https://www.runoob.com/python3/python3-data-type.html",
	"html": "菜鸟教程 -- 学的不仅是技术，更是梦想！\n首页 HTML CSS JAVASCRIPT VUE BOOTSTRAP NODEJS PYTHON3 PYTHON2 JAVA C C++ C# GO SQL LINUX JQUERY 本地书签\n Python 3 教程 \nPython3 教程\nPython3 简介\nPython3 环境搭建\nPython3 VScode\nPython3 基础语法\n Python3 基本数据类型\nPython3 数据类型转换\nPython3 解释器\nPython3 注释\nPython3 运算符\nPython3 数字(Number)\nPython3 字符串\nPython3 列表\nPython3 元组\nPython3 字典\nPython3 集合\nPython3 条件控制\nPython3 循环语句\nPython3 编程第一步\nPython3 推导式\nPython3 迭代器与生成器\nPython3 函数\nPython3 lambda\nPython3 数据结构\nPython3 模块\nPython3 输入和输出\nPython3 File\nPython3 OS\nPython3 错误和异常\nPython3 面向对象\nPython3 命名空间/作用域\nPython3 标准库概览\nPython3 实例\nPython 测验\n\n\nPython3 高级教程\nPython3 正则表达式\nPython3 CGI编程\nPython3 MySQL(mysql-connector)\nPython3 MySQL(PyMySQL)\nPython3 网络编程\nPython3 SMTP发送邮件\nPython3 多线程\nPython3 XML 解析\nPython3 JSON\nPython3 日期和时间\nPython3 内置函数\nPython3 MongoDB\nPython3 urllib\nPython uWSGI 安装配置\nPython3 pip\nPython3 operator\nPython math\nPython requests\nPython random\nPython 有用的资源\nPython AI 绘画\nPython statistics\n Python3 基础语法\nPython3 数据类型转换 \nPython3 基本数据类型\n\nPython 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。\n\n在 Python 中，变量就是变量，它没有类型，我们所说的\"类型\"是变量所指的内存中对象的类型。\n\n等号（=）用来给变量赋值。\n\n等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：\n\n实例(Python 3.0+)\n#!/usr/bin/python3\n\ncounter = 100          # 整型变量\nmiles   = 1000.0       # 浮点型变量\nname    = \"runoob\"     # 字符串\n\nprint (counter)\nprint (miles)\nprint (name)\n\n\n运行实例 »\n\n执行以上程序会输出如下结果：\n\n100\n1000.0\nrunoob\n多个变量赋值\n\nPython允许你同时为多个变量赋值。例如：\n\na = b = c = 1\n\n以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。\n\n您也可以为多个对象指定多个变量。例如：\n\na, b, c = 1, 2, \"runoob\"\n\n以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 \"runoob\" 分配给变量 c。\n\n标准数据类型\n\nPython3 中常见的数据类型有：\n\nNumber（数字）\nString（字符串）\nbool（布尔类型）\nList（列表）\nTuple（元组）\nSet（集合）\nDictionary（字典）\n\nPython3 的六个标准数据类型中：\n\n不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；\n可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。\n\n此外还有一些高级的数据类型，如: 字节数组类型(bytes)。\n\nNumber（数字）\n\nPython3 支持 int、float、bool、complex（复数）。\n\n在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。\n\n像大多数语言一样，数值类型的赋值和计算都是很直观的。\n\n内置的 type() 函数可以用来查询变量所指的对象类型。\n\n>>> a, b, c, d = 20, 5.5, True, 4+3j\n>>> print(type(a), type(b), type(c), type(d))\n<class 'int'> <class 'float'> <class 'bool'> <class 'complex'>\n\n此外还可以用 isinstance 来判断：\n\n实例\n>>> a = 111\n>>> isinstance(a, int)\nTrue\n>>>\n\n\nisinstance 和 type 的区别在于：\n\ntype()不会认为子类是一种父类类型。\nisinstance()会认为子类是一种父类类型。\n>>> class A:\n...     pass\n... \n>>> class B(A):\n...     pass\n... \n>>> isinstance(A(), A)\nTrue\n>>> type(A()) == A \nTrue\n>>> isinstance(B(), A)\nTrue\n>>> type(B()) == A\nFalse\n\n注意：Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加， True==1、False==0 会返回 True，但可以通过 is 来判断类型。\n\n>>> issubclass(bool, int) \nTrue\n>>> True==1\nTrue\n>>> False==0\nTrue\n>>> True+1\n2\n>>> False+1\n1\n>>> 1 is True\nFalse\n>>> 0 is False\nFalse\n\n在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。\n\n当你指定一个值时，Number 对象就会被创建：\n\nvar1 = 1\nvar2 = 10\n\n您也可以使用del语句删除一些对象引用。\n\ndel语句的语法是：\n\ndel var1[,var2[,var3[....,varN]]]\n\n您可以通过使用del语句删除单个或多个对象。例如：\n\ndel var\ndel var_a, var_b\n数值运算\n实例\n>>> 5 + 4  # 加法\n9\n>>> 4.3 - 2 # 减法\n2.3\n>>> 3 * 7  # 乘法\n21\n>>> 2 / 4  # 除法，得到一个浮点数\n0.5\n>>> 2 // 4 # 除法，得到一个整数\n0\n>>> 17 % 3 # 取余\n2\n>>> 2 ** 5 # 乘方\n32\n\n\n注意：\n\n1、Python可以同时为多个变量赋值，如a, b = 1, 2。\n2、一个变量可以通过赋值指向不同类型的对象。\n3、数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。\n4、在混合计算时，Python会把整型转换成为浮点数。\n数值类型实例\nint\tfloat\tcomplex\n10\t0.0\t3.14j\n100\t15.20\t45.j\n-786\t-21.9\t9.322e-36j\n080\t32.3e+18\t.876j\n-0490\t-90.\t-.6545+0J\n-0x260\t-32.54e100\t3e+26J\n0x69\t70.2E-12\t4.53e-7j\n\nPython 还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj，或者 complex(a,b) 表示， 复数的实部 a 和虚部 b 都是浮点型。\n\nString（字符串）\n\nPython中的字符串用单引号 ' 或双引号 \" 括起来，同时使用反斜杠 \\ 转义特殊字符。\n\n字符串的截取的语法格式如下：\n\n变量[头下标:尾下标]\n\n索引值以 0 为开始值，-1 为从末尾的开始位置。\n\n加号 + 是字符串的连接符， 星号 * 表示复制当前字符串，与之结合的数字为复制的次数。实例如下：\n\n实例\n#!/usr/bin/python3\n\nstr = 'Runoob'\n\nprint (str)          # 输出字符串\nprint (str[0:-1])    # 输出第一个到倒数第二个的所有字符\nprint (str[0])       # 输出字符串第一个字符\nprint (str[2:5])     # 输出从第三个开始到第五个的字符\nprint (str[2:])      # 输出从第三个开始的后的所有字符\nprint (str * 2)      # 输出字符串两次，也可以写成 print (2 * str)\nprint (str + \"TEST\") # 连接字符串\n\n\n执行以上程序会输出如下结果：\n\nRunoob\nRunoo\nR\nnoo\nnoob\nRunoobRunoob\nRunoobTEST\n\nPython 使用反斜杠 \\ 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串：\n\n实例\n>>> print('Ru\\noob')\nRu\noob\n>>> print(r'Ru\\noob')\nRu\\noob\n>>>\n\n\n另外，反斜杠(\\)可以作为续行符，表示下一行是上一行的延续。也可以使用 \"\"\"...\"\"\" 或者 '''...''' 跨越多行。\n\n注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。\n\n实例\n>>> word = 'Python'\n>>> print(word[0], word[5])\nP n\n>>> print(word[-1], word[-6])\nn P\n\n\n与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如 word[0] = 'm' 会导致错误。\n\n注意：\n\n1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。\n2、字符串可以用+运算符连接在一起，用*运算符重复。\n3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。\n4、Python中的字符串不能改变。\nbool（布尔类型）\n\n布尔类型即 True 或 False。\n\n在 Python 中，True 和 False 都是关键字，表示布尔值。\n\n布尔类型可以用来控制程序的流程，比如判断某个条件是否成立，或者在某个条件满足时执行某段代码。\n\n布尔类型特点：\n\n布尔类型只有两个值：True 和 False。\n\n布尔类型可以和其他数据类型进行比较，比如数字、字符串等。在比较时，Python 会将 True 视为 1，False 视为 0。\n\n布尔类型可以和逻辑运算符一起使用，包括 and、or 和 not。这些运算符可以用来组合多个布尔表达式，生成一个新的布尔值。\n\n布尔类型也可以被转换成其他数据类型，比如整数、浮点数和字符串。在转换时，True 会被转换成 1，False 会被转换成 0。\n\n实例\na = True\nb = False\n\n# 比较运算符\nprint(2 < 3)   # True\nprint(2 == 3)  # False\n\n# 逻辑运算符\nprint(a and b)  # False\nprint(a or b)   # True\nprint(not a)    # False\n\n# 类型转换\nprint(int(a))   # 1\nprint(float(b)) # 0.0\nprint(str(a))   # \"True\"\n\n\n注意: 在 Python 中，所有非零的数字和非空的字符串、列表、元组等数据类型都被视为 True，只有 0、空字符串、空列表、空元组等被视为 False。因此，在进行布尔类型转换时，需要注意数据类型的真假性。\n\nList（列表）\n\nList（列表） 是 Python 中使用最频繁的数据类型。\n\n列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。\n\n列表是写在方括号 [] 之间、用逗号分隔开的元素列表。\n\n和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。\n\n列表截取的语法格式如下：\n\n变量[头下标:尾下标]\n\n索引值以 0 为开始值，-1 为从末尾的开始位置。\n\n加号 + 是列表连接运算符，星号 * 是重复操作。如下实例：\n\n实例\n#!/usr/bin/python3\n\nlist = [ 'abcd', 786 , 2.23, 'runoob', 70.2 ]\ntinylist = [123, 'runoob']\n\nprint (list)            # 输出完整列表\nprint (list[0])         # 输出列表第一个元素\nprint (list[1:3])       # 从第二个开始输出到第三个元素\nprint (list[2:])        # 输出从第三个元素开始的所有元素\nprint (tinylist * 2)    # 输出两次列表\nprint (list + tinylist) # 连接列表\n\n\n以上实例输出结果：\n\n['abcd', 786, 2.23, 'runoob', 70.2]\nabcd\n[786, 2.23]\n[2.23, 'runoob', 70.2]\n[123, 'runoob', 123, 'runoob']\n['abcd', 786, 2.23, 'runoob', 70.2, 123, 'runoob']\n\n与Python字符串不一样的是，列表中的元素是可以改变的：\n\n实例\n>>> a = [1, 2, 3, 4, 5, 6]\n>>> a[0] = 9\n>>> a[2:5] = [13, 14, 15]\n>>> a\n[9, 2, 13, 14, 15, 6]\n>>> a[2:5] = []   # 将对应的元素值设置为 []\n>>> a\n[9, 2, 6]\n\n\nList 内置了有很多方法，例如 append()、pop() 等等，这在后面会讲到。\n\n注意：\n\n1、List写在方括号之间，元素用逗号隔开。\n2、和字符串一样，list可以被索引和切片。\n3、List可以使用+操作符进行拼接。\n4、List中的元素是可以改变的。\n\nPython 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：\n\n如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串：\n\n实例\ndef reverseWords(input):\n     \n    # 通过空格将字符串分隔符，把各个单词分隔为列表\n    inputWords = input.split(\" \")\n \n    # 翻转字符串\n    # 假设列表 list = [1,2,3,4],  \n    # list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)\n    # inputWords[-1::-1] 有三个参数\n    # 第一个参数 -1 表示最后一个元素\n    # 第二个参数为空，表示移动到列表末尾\n    # 第三个参数为步长，-1 表示逆向\n    inputWords=inputWords[-1::-1]\n \n    # 重新组合字符串\n    output = ' '.join(inputWords)\n     \n    return output\n \nif __name__ == \"__main__\":\n    input = 'I like runoob'\n    rw = reverseWords(input)\n    print(rw)\n\n\n输出结果为：\n\nrunoob like I\nTuple（元组）\n\n元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。\n\n元组中的元素类型也可以不相同：\n\n实例\n#!/usr/bin/python3\n\ntuple = ( 'abcd', 786 , 2.23, 'runoob', 70.2  )\ntinytuple = (123, 'runoob')\n\nprint (tuple)             # 输出完整元组\nprint (tuple[0])          # 输出元组的第一个元素\nprint (tuple[1:3])        # 输出从第二个元素开始到第三个元素\nprint (tuple[2:])         # 输出从第三个元素开始的所有元素\nprint (tinytuple * 2)     # 输出两次元组\nprint (tuple + tinytuple) # 连接元组\n\n\n以上实例输出结果：\n\n('abcd', 786, 2.23, 'runoob', 70.2)\nabcd\n(786, 2.23)\n(2.23, 'runoob', 70.2)\n(123, 'runoob', 123, 'runoob')\n('abcd', 786, 2.23, 'runoob', 70.2, 123, 'runoob')\n\n元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。\n\n其实，可以把字符串看作一种特殊的元组。\n\n实例\n>>> tup = (1, 2, 3, 4, 5, 6)\n>>> print(tup[0])\n1\n>>> print(tup[1:5])\n(2, 3, 4, 5)\n>>> tup[0] = 11  # 修改元组元素的操作是非法的\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'tuple' object does not support item assignment\n>>>\n\n\n虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。\n\n构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：\n\ntup1 = ()    # 空元组\ntup2 = (20,) # 一个元素，需要在元素后添加逗号\n\nstring、list 和 tuple 都属于 sequence（序列）。\n\n注意：\n\n1、与字符串一样，元组的元素不能修改。\n2、元组也可以被索引和切片，方法一样。\n3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。\n4、元组也可以使用+操作符进行拼接。\nSet（集合）\n\nPython 中的集合（Set）是一种无序、可变的数据类型，用于存储唯一的元素。\n\n集合中的元素不会重复，并且可以进行交集、并集、差集等常见的集合操作。\n\n在 Python 中，集合使用大括号 {} 表示，元素之间用逗号 , 分隔。\n\n另外，也可以使用 set() 函数创建集合。\n\n注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。\n\n创建格式：\n\nparame = {value01,value02,...}\n或者\nset(value)\n实例\n#!/usr/bin/python3\n\nsites = {'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu'}\n\nprint(sites)   # 输出集合，重复的元素被自动去掉\n\n# 成员测试\nif 'Runoob' in sites :\n    print('Runoob 在集合中')\nelse :\n    print('Runoob 不在集合中')\n\n\n# set可以进行集合运算\na = set('abracadabra')\nb = set('alacazam')\n\nprint(a)\n\nprint(a - b)     # a 和 b 的差集\n\nprint(a | b)     # a 和 b 的并集\n\nprint(a & b)     # a 和 b 的交集\n\nprint(a ^ b)     # a 和 b 中不同时存在的元素\n\n\n以上实例输出结果：\n\n{'Zhihu', 'Baidu', 'Taobao', 'Runoob', 'Google', 'Facebook'}\nRunoob 在集合中\n{'b', 'c', 'a', 'r', 'd'}\n{'r', 'b', 'd'}\n{'b', 'c', 'a', 'z', 'm', 'r', 'l', 'd'}\n{'c', 'a'}\n{'z', 'b', 'm', 'r', 'l', 'd'}\nDictionary（字典）\n\n字典（dictionary）是Python中另一个非常有用的内置数据类型。\n\n列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n\n字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。\n\n键(key)必须使用不可变类型。\n\n在同一个字典中，键(key)必须是唯一的。\n\n实例\n#!/usr/bin/python3\n\ndict = {}\ndict['one'] = \"1 - 菜鸟教程\"\ndict[2]     = \"2 - 菜鸟工具\"\n\ntinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}\n\n\nprint (dict['one'])       # 输出键为 'one' 的值\nprint (dict[2])           # 输出键为 2 的值\nprint (tinydict)          # 输出完整的字典\nprint (tinydict.keys())   # 输出所有键\nprint (tinydict.values()) # 输出所有值\n\n\n以上实例输出结果：\n\n1 - 菜鸟教程\n2 - 菜鸟工具\n{'name': 'runoob', 'code': 1, 'site': 'www.runoob.com'}\ndict_keys(['name', 'code', 'site'])\ndict_values(['runoob', 1, 'www.runoob.com'])\n\n构造函数 dict() 可以直接从键值对序列中构建字典如下：\n\n实例\n>>> dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)])\n{'Runoob': 1, 'Google': 2, 'Taobao': 3}\n>>> {x: x**2 for x in (2, 4, 6)}\n{2: 4, 4: 16, 6: 36}\n>>> dict(Runoob=1, Google=2, Taobao=3)\n{'Runoob': 1, 'Google': 2, 'Taobao': 3}\n\n\n{x: x**2 for x in (2, 4, 6)} 该代码使用的是字典推导式，更多推导式内容可以参考：Python 推导式。\n\n另外，字典类型也有一些内置的函数，例如 clear()、keys()、values() 等。\n\n注意：\n\n1、字典是一种映射类型，它的元素是键值对。\n2、字典的关键字必须为不可变类型，且不能重复。\n3、创建空字典使用 { }。\nbytes 类型\n\n在 Python3 中，bytes 类型表示的是不可变的二进制序列（byte sequence）。\n\n与字符串类型不同的是，bytes 类型中的元素是整数值（0 到 255 之间的整数），而不是 Unicode 字符。\n\nbytes 类型通常用于处理二进制数据，比如图像文件、音频文件、视频文件等等。在网络编程中，也经常使用 bytes 类型来传输二进制数据。\n\n创建 bytes 对象的方式有多种，最常见的方式是使用 b 前缀：\n\n此外，也可以使用 bytes() 函数将其他类型的对象转换为 bytes 类型。bytes() 函数的第一个参数是要转换的对象，第二个参数是编码方式，如果省略第二个参数，则默认使用 UTF-8 编码：\n\nx = bytes(\"hello\", encoding=\"utf-8\")\n\n与字符串类型类似，bytes 类型也支持许多操作和方法，如切片、拼接、查找、替换等等。同时，由于 bytes 类型是不可变的，因此在进行修改操作时需要创建一个新的 bytes 对象。例如：\n\n实例\n\nx = b\"hello\"\ny = x[1:3]  # 切片操作，得到 b\"el\"\nz = x + b\"world\"  # 拼接操作，得到 b\"helloworld\"\n\n\n需要注意的是，bytes 类型中的元素是整数值，因此在进行比较操作时需要使用相应的整数值。例如：\n\n实例\nx = b\"hello\"\nif x[0] == ord(\"h\"):\n    print(\"The first element is 'h'\")\n\n\n其中 ord() 函数用于将字符转换为相应的整数值。\n\nPython数据类型转换\n\n有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可，在下一章节 Python3 数据类型转换 会具体介绍。\n\n以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。\n\n函数\t描述\n\n\nint(x [,base])\n\n\t\n\n将x转换为一个整数\n\n\n\n\nfloat(x)\n\n\t\n\n将x转换到一个浮点数\n\n\n\n\ncomplex(real [,imag])\n\n\t\n\n创建一个复数\n\n\n\n\nstr(x)\n\n\t\n\n将对象 x 转换为字符串\n\n\n\n\nrepr(x)\n\n\t\n\n将对象 x 转换为表达式字符串\n\n\n\n\neval(str)\n\n\t\n\n用来计算在字符串中的有效Python表达式,并返回一个对象\n\n\n\n\ntuple(s)\n\n\t\n\n将序列 s 转换为一个元组\n\n\n\n\nlist(s)\n\n\t\n\n将序列 s 转换为一个列表\n\n\n\n\nset(s)\n\n\t\n\n转换为可变集合\n\n\n\n\ndict(d)\n\n\t\n\n创建一个字典。d 必须是一个 (key, value)元组序列。\n\n\n\n\nfrozenset(s)\n\n\t\n\n转换为不可变集合\n\n\n\n\nchr(x)\n\n\t\n\n将一个整数转换为一个字符\n\n\n\n\nord(x)\n\n\t\n\n将一个字符转换为它的整数值\n\n\n\n\nhex(x)\n\n\t\n\n将一个整数转换为一个十六进制字符串\n\n\n\n\noct(x)\n\n\t\n\n将一个整数转换为一个八进制字符串\n\n Python3 基础语法\nPython3 数据类型转换 \n20 篇笔记\n 写笔记\n 分类导航\nHTML / CSS\nJavaScript\n服务端\n数据库\n数据分析\n移动端\nXML 教程\nASP.NET\nWeb Service\n开发工具\n网站建设\n\n\nAdvertisement\n反馈/建议\n反馈/建议\n在线实例\n·HTML 实例\n·CSS 实例\n·JavaScript 实例\n·Ajax 实例\n·jQuery 实例\n·XML 实例\n·Java 实例\n字符集&工具\n· HTML 字符集设置\n· HTML ASCII 字符集\n· JS 混淆/加密\n· PNG/JPEG 图片压缩\n· HTML 拾色器\n· JSON 格式化工具\n· 随机数生成器\n最新更新\n· 正则表达式入门教程\n· Python lambda（...\n· Java 注释\n· Bootstrap5 消息...\n· Python 按字母顺...\n· Python 删除字符...\n· git restore 命令\n站点信息\n· 意见反馈\n· 免责声明\n· 关于我们\n· 文章归档\n关注微信\nCopyright © 2013-2023 菜鸟教程  runoob.com All Rights Reserved. 备案号：闽ICP备15012807号-1\n  \nRUNOOB asks for your consent to use your personal data to:\nperm_identity\nPersonalised advertising and content, advertising and content measurement, audience research and services development\ndevices\nStore and/or access information on a device\nexpand_more\nLearn more\n\nYour personal data will be processed and information from your device (cookies, unique identifiers, and other device data) may be stored by, accessed by and shared with 136 TCF vendor(s) and 66 ad partner(s), or used specifically by this site or app.\n\nSome vendors may process your personal data on the basis of legitimate interest, which you can object to by managing your options below. Look for a link at the bottom of this page or in our privacy policy where you can withdraw consent.\n\nConsent\n\nDo not consent\n\nManage options"
}