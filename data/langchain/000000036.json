{
	"title": "Graph querying | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/use_cases/graph/",
	"html": "Skip to main content\n🦜️🔗 LangChain\nDocs\nUse cases\nIntegrations\nGuides\nAPI\nMore\n🦜️🔗\nChat\nSearch\n⌘\nK\nQA over structured data\nSQL\nRetrieval-augmented generation (RAG)\nInteracting with APIs\nChatbots\nExtraction\nSummarization\nTagging\nWeb scraping\nSynthetic data generation\nGraph querying\nDiffbot Graph Transformer\nArangoDB QA chain\nNeo4j DB QA chain\nFalkorDBQAChain\nHugeGraph QA Chain\nKuzuQAChain\nMemgraph QA chain\nNebulaGraphQAChain\nNetworkX Graph QA\nGraphSparqlQAChain\nNeptune Open Cypher QA Chain\nGraph querying\nGraph querying\n\nGraph databases give us a powerful way to represent and query real-world relationships. There are a number of chains that make it easy to use LLMs to interact with various graph DBs.\n\n📄️ Diffbot Graph Transformer\n\nOpen In Colab\n\n📄️ ArangoDB QA chain\n\nOpen In Colab\n\n📄️ Neo4j DB QA chain\n\nThis notebook shows how to use LLMs to provide a natural language\n\n📄️ FalkorDBQAChain\n\nThis notebook shows how to use LLMs to provide a natural language\n\n📄️ HugeGraph QA Chain\n\nThis notebook shows how to use LLMs to provide a natural language\n\n📄️ KuzuQAChain\n\nThis notebook shows how to use LLMs to provide a natural language\n\n📄️ Memgraph QA chain\n\nThis notebook shows how to use LLMs to provide a natural language\n\n📄️ NebulaGraphQAChain\n\nThis notebook shows how to use LLMs to provide a natural language\n\n📄️ NetworkX Graph QA\n\nThis notebook goes over how to do question answering over a graph data\n\n📄️ GraphSparqlQAChain\n\nGraph databases are an excellent choice for applications based on\n\n📄️ Neptune Open Cypher QA Chain\n\nThis QA chain queries Neptune graph database using openCypher and\n\nPrevious\nSynthetic data generation\nNext\nDiffbot Graph Transformer\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nCopyright © 2023 LangChain, Inc."
}