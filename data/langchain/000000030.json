{
	"title": "Interacting with APIs | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/use_cases/apis",
	"html": "Skip to main content\n🦜️🔗 LangChain\nDocs\nUse cases\nIntegrations\nGuides\nAPI\nMore\n🦜️🔗\nChat\nSearch\n⌘\nK\nQA over structured data\nSQL\nRetrieval-augmented generation (RAG)\nInteracting with APIs\nChatbots\nExtraction\nSummarization\nTagging\nWeb scraping\nSynthetic data generation\nGraph querying\nInteracting with APIs\nInteracting with APIs\n\nOpen In Colab\n\nUse case​\n\nSuppose you want an LLM to interact with external APIs.\n\nThis can be very useful for retrieving context for the LLM to utilize.\n\nAnd, more generally, it allows us to interact with APIs using natural language!\n\nOverview​\n\nThere are two primary ways to interface LLMs with external APIs:\n\nFunctions: For example, OpenAI functions is one popular means of doing this.\nLLM-generated interface: Use an LLM with access to API documentation to create an interface.\n\nQuickstart​\n\nMany APIs are already compatible with OpenAI function calling.\n\nFor example, Klarna has a YAML file that describes its API and allows OpenAI to interact with it:\n\nhttps://www.klarna.com/us/shopping/public/openai/v0/api-docs/\n\n\nOther options include:\n\nSpeak for translation\nXKCD for comics\n\nWe can supply the specification to get_openapi_chain directly in order to query the API with OpenAI functions:\n\npip install langchain openai \n\n# Set env var OPENAI_API_KEY or load from a .env file:\n# import dotenv\n# dotenv.load_dotenv()\n\nfrom langchain.chains.openai_functions.openapi import get_openapi_chain\n\nchain = get_openapi_chain(\n    \"https://www.klarna.com/us/shopping/public/openai/v0/api-docs/\"\n)\nchain(\"What are some options for a men's large blue button down shirt\")\n\nAttempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.\n\n{'query': \"What are some options for a men's large blue button down shirt\",\n 'response': {'products': [{'name': 'Cubavera Four Pocket Guayabera Shirt',\n    'url': 'https://www.klarna.com/us/shopping/pl/cl10001/3202055522/Clothing/Cubavera-Four-Pocket-Guayabera-Shirt/?utm_source=openai&ref-site=openai_plugin',\n    'price': '$13.50',\n    'attributes': ['Material:Polyester,Cotton',\n     'Target Group:Man',\n     'Color:Red,White,Blue,Black',\n     'Properties:Pockets',\n     'Pattern:Solid Color',\n     'Size (Small-Large):S,XL,L,M,XXL']},\n   {'name': 'Polo Ralph Lauren Plaid Short Sleeve Button-down Oxford Shirt',\n    'url': 'https://www.klarna.com/us/shopping/pl/cl10001/3207163438/Clothing/Polo-Ralph-Lauren-Plaid-Short-Sleeve-Button-down-Oxford-Shirt/?utm_source=openai&ref-site=openai_plugin',\n    'price': '$52.20',\n    'attributes': ['Material:Cotton',\n     'Target Group:Man',\n     'Color:Red,Blue,Multicolor',\n     'Size (Small-Large):S,XL,L,M,XXL']},\n   {'name': 'Brixton Bowery Flannel Shirt',\n    'url': 'https://www.klarna.com/us/shopping/pl/cl10001/3202331096/Clothing/Brixton-Bowery-Flannel-Shirt/?utm_source=openai&ref-site=openai_plugin',\n    'price': '$27.48',\n    'attributes': ['Material:Cotton',\n     'Target Group:Man',\n     'Color:Gray,Blue,Black,Orange',\n     'Properties:Pockets',\n     'Pattern:Checkered',\n     'Size (Small-Large):XL,3XL,4XL,5XL,L,M,XXL']},\n   {'name': 'Vineyard Vines Gingham On-The-Go brrr Classic Fit Shirt Crystal',\n    'url': 'https://www.klarna.com/us/shopping/pl/cl10001/3201938510/Clothing/Vineyard-Vines-Gingham-On-The-Go-brrr-Classic-Fit-Shirt-Crystal/?utm_source=openai&ref-site=openai_plugin',\n    'price': '$80.64',\n    'attributes': ['Material:Cotton',\n     'Target Group:Man',\n     'Color:Blue',\n     'Size (Small-Large):XL,XS,L,M']},\n   {'name': \"Carhartt Men's Loose Fit Midweight Short Sleeve Plaid Shirt\",\n    'url': 'https://www.klarna.com/us/shopping/pl/cl10001/3201826024/Clothing/Carhartt-Men-s-Loose-Fit-Midweight-Short-Sleeve-Plaid-Shirt/?utm_source=openai&ref-site=openai_plugin',\n    'price': '$17.99',\n    'attributes': ['Material:Cotton',\n     'Target Group:Man',\n     'Color:Red,Brown,Blue,Green',\n     'Properties:Pockets',\n     'Pattern:Checkered',\n     'Size (Small-Large):S,XL,L,M']}]}}\n\nFunctions​\n\nWe can unpack what is happening when we use the functions to call external APIs.\n\nLet’s look at the LangSmith trace:\n\nSee here that we call the OpenAI LLM with the provided API spec:\nhttps://www.klarna.com/us/shopping/public/openai/v0/api-docs/\n\nThe prompt then tells the LLM to use the API spec with input question:\nUse the provided APIs to respond to this user query:\nWhat are some options for a men's large blue button down shirt\n\nThe LLM returns the parameters for the function call productsUsingGET, which is specified in the provided API spec:\nfunction_call:\n  name: productsUsingGET\n  arguments: |-\n    {\n      \"params\": {\n        \"countryCode\": \"US\",\n        \"q\": \"men's large blue button down shirt\",\n        \"size\": 5,\n        \"min_price\": 0,\n        \"max_price\": 100\n      }\n    }\n\n\nThis Dict above split and the API is called here.\nAPI Chain​\n\nWe can also build our own interface to external APIs using the APIChain and provided API documentation.\n\nfrom langchain.chains import APIChain\nfrom langchain.chains.api import open_meteo_docs\nfrom langchain.llms import OpenAI\n\nllm = OpenAI(temperature=0)\nchain = APIChain.from_llm_and_api_docs(\n    llm,\n    open_meteo_docs.OPEN_METEO_DOCS,\n    verbose=True,\n    limit_to_domains=[\"https://api.open-meteo.com/\"],\n)\nchain.run(\n    \"What is the weather like right now in Munich, Germany in degrees Fahrenheit?\"\n)\n\n\n\n> Entering new APIChain chain...\nhttps://api.open-meteo.com/v1/forecast?latitude=48.1351&longitude=11.5820&hourly=temperature_2m&temperature_unit=fahrenheit&current_weather=true\n{\"latitude\":48.14,\"longitude\":11.58,\"generationtime_ms\":0.1710653305053711,\"utc_offset_seconds\":0,\"timezone\":\"GMT\",\"timezone_abbreviation\":\"GMT\",\"elevation\":521.0,\"current_weather_units\":{\"time\":\"iso8601\",\"interval\":\"seconds\",\"temperature\":\"°F\",\"windspeed\":\"km/h\",\"winddirection\":\"°\",\"is_day\":\"\",\"weathercode\":\"wmo code\"},\"current_weather\":{\"time\":\"2023-11-01T21:30\",\"interval\":900,\"temperature\":46.5,\"windspeed\":7.7,\"winddirection\":259,\"is_day\":0,\"weathercode\":3},\"hourly_units\":{\"time\":\"iso8601\",\"temperature_2m\":\"°F\"},\"hourly\":{\"time\":[\"2023-11-01T00:00\",\"2023-11-01T01:00\",\"2023-11-01T02:00\",\"2023-11-01T03:00\",\"2023-11-01T04:00\",\"2023-11-01T05:00\",\"2023-11-01T06:00\",\"2023-11-01T07:00\",\"2023-11-01T08:00\",\"2023-11-01T09:00\",\"2023-11-01T10:00\",\"2023-11-01T11:00\",\"2023-11-01T12:00\",\"2023-11-01T13:00\",\"2023-11-01T14:00\",\"2023-11-01T15:00\",\"2023-11-01T16:00\",\"2023-11-01T17:00\",\"2023-11-01T18:00\",\"2023-11-01T19:00\",\"2023-11-01T20:00\",\"2023-11-01T21:00\",\"2023-11-01T22:00\",\"2023-11-01T23:00\",\"2023-11-02T00:00\",\"2023-11-02T01:00\",\"2023-11-02T02:00\",\"2023-11-02T03:00\",\"2023-11-02T04:00\",\"2023-11-02T05:00\",\"2023-11-02T06:00\",\"2023-11-02T07:00\",\"2023-11-02T08:00\",\"2023-11-02T09:00\",\"2023-11-02T10:00\",\"2023-11-02T11:00\",\"2023-11-02T12:00\",\"2023-11-02T13:00\",\"2023-11-02T14:00\",\"2023-11-02T15:00\",\"2023-11-02T16:00\",\"2023-11-02T17:00\",\"2023-11-02T18:00\",\"2023-11-02T19:00\",\"2023-11-02T20:00\",\"2023-11-02T21:00\",\"2023-11-02T22:00\",\"2023-11-02T23:00\",\"2023-11-03T00:00\",\"2023-11-03T01:00\",\"2023-11-03T02:00\",\"2023-11-03T03:00\",\"2023-11-03T04:00\",\"2023-11-03T05:00\",\"2023-11-03T06:00\",\"2023-11-03T07:00\",\"2023-11-03T08:00\",\"2023-11-03T09:00\",\"2023-11-03T10:00\",\"2023-11-03T11:00\",\"2023-11-03T12:00\",\"2023-11-03T13:00\",\"2023-11-03T14:00\",\"2023-11-03T15:00\",\"2023-11-03T16:00\",\"2023-11-03T17:00\",\"2023-11-03T18:00\",\"2023-11-03T19:00\",\"2023-11-03T20:00\",\"2023-11-03T21:00\",\"2023-11-03T22:00\",\"2023-11-03T23:00\",\"2023-11-04T00:00\",\"2023-11-04T01:00\",\"2023-11-04T02:00\",\"2023-11-04T03:00\",\"2023-11-04T04:00\",\"2023-11-04T05:00\",\"2023-11-04T06:00\",\"2023-11-04T07:00\",\"2023-11-04T08:00\",\"2023-11-04T09:00\",\"2023-11-04T10:00\",\"2023-11-04T11:00\",\"2023-11-04T12:00\",\"2023-11-04T13:00\",\"2023-11-04T14:00\",\"2023-11-04T15:00\",\"2023-11-04T16:00\",\"2023-11-04T17:00\",\"2023-11-04T18:00\",\"2023-11-04T19:00\",\"2023-11-04T20:00\",\"2023-11-04T21:00\",\"2023-11-04T22:00\",\"2023-11-04T23:00\",\"2023-11-05T00:00\",\"2023-11-05T01:00\",\"2023-11-05T02:00\",\"2023-11-05T03:00\",\"2023-11-05T04:00\",\"2023-11-05T05:00\",\"2023-11-05T06:00\",\"2023-11-05T07:00\",\"2023-11-05T08:00\",\"2023-11-05T09:00\",\"2023-11-05T10:00\",\"2023-11-05T11:00\",\"2023-11-05T12:00\",\"2023-11-05T13:00\",\"2023-11-05T14:00\",\"2023-11-05T15:00\",\"2023-11-05T16:00\",\"2023-11-05T17:00\",\"2023-11-05T18:00\",\"2023-11-05T19:00\",\"2023-11-05T20:00\",\"2023-11-05T21:00\",\"2023-11-05T22:00\",\"2023-11-05T23:00\",\"2023-11-06T00:00\",\"2023-11-06T01:00\",\"2023-11-06T02:00\",\"2023-11-06T03:00\",\"2023-11-06T04:00\",\"2023-11-06T05:00\",\"2023-11-06T06:00\",\"2023-11-06T07:00\",\"2023-11-06T08:00\",\"2023-11-06T09:00\",\"2023-11-06T10:00\",\"2023-11-06T11:00\",\"2023-11-06T12:00\",\"2023-11-06T13:00\",\"2023-11-06T14:00\",\"2023-11-06T15:00\",\"2023-11-06T16:00\",\"2023-11-06T17:00\",\"2023-11-06T18:00\",\"2023-11-06T19:00\",\"2023-11-06T20:00\",\"2023-11-06T21:00\",\"2023-11-06T22:00\",\"2023-11-06T23:00\",\"2023-11-07T00:00\",\"2023-11-07T01:00\",\"2023-11-07T02:00\",\"2023-11-07T03:00\",\"2023-11-07T04:00\",\"2023-11-07T05:00\",\"2023-11-07T06:00\",\"2023-11-07T07:00\",\"2023-11-07T08:00\",\"2023-11-07T09:00\",\"2023-11-07T10:00\",\"2023-11-07T11:00\",\"2023-11-07T12:00\",\"2023-11-07T13:00\",\"2023-11-07T14:00\",\"2023-11-07T15:00\",\"2023-11-07T16:00\",\"2023-11-07T17:00\",\"2023-11-07T18:00\",\"2023-11-07T19:00\",\"2023-11-07T20:00\",\"2023-11-07T21:00\",\"2023-11-07T22:00\",\"2023-11-07T23:00\"],\"temperature_2m\":[47.9,46.9,47.1,46.6,45.8,45.2,43.4,43.5,46.8,51.5,55.0,56.3,58.1,57.9,57.0,56.6,54.4,52.1,49.1,48.3,47.7,46.9,46.2,45.8,44.4,42.4,41.7,41.7,42.0,42.7,43.6,44.3,45.9,48.0,49.1,50.7,52.2,52.6,51.9,50.3,48.1,47.4,47.1,46.9,46.2,45.7,45.6,45.6,45.7,45.3,45.1,44.2,43.6,43.2,42.8,41.6,41.0,42.1,42.4,42.3,42.7,43.9,44.2,43.6,41.9,40.4,39.0,40.8,40.2,40.1,39.6,38.8,38.2,36.9,35.8,36.4,37.3,38.5,38.9,39.0,41.8,45.4,48.7,50.8,51.7,52.1,51.3,49.8,48.6,47.8,47.0,46.3,45.9,45.6,45.7,46.1,46.3,46.4,46.3,46.3,45.8,45.4,45.5,47.1,49.3,51.2,52.4,53.1,53.5,53.4,53.0,52.4,51.6,50.5,49.6,49.0,48.6,48.1,47.6,47.0,46.4,46.0,45.5,45.1,44.4,43.7,43.9,45.6,48.1,50.3,51.7,52.8,53.5,52.7,51.5,50.2,48.8,47.4,46.2,45.5,45.0,44.6,44.3,44.2,43.9,43.4,43.0,42.6,42.3,42.0,42.2,43.0,44.3,45.5,46.8,48.1,48.9,49.0,48.7,48.1,47.4,46.5,45.7,45.1,44.5,44.3,44.5,45.1]}}\n\n> Finished chain.\n\n' The current temperature in Munich, Germany is 46.5°F.'\n\n\nNote that we supply information about the API:\n\nopen_meteo_docs.OPEN_METEO_DOCS[0:500]\n\n'BASE URL: https://api.open-meteo.com/\\n\\nAPI Documentation\\nThe API endpoint /v1/forecast accepts a geographical coordinate, a list of weather variables and responds with a JSON hourly weather forecast for 7 days. Time always starts at 0:00 today and contains 168 hours. All URL parameters are listed below:\\n\\nParameter\\tFormat\\tRequired\\tDefault\\tDescription\\nlatitude, longitude\\tFloating point\\tYes\\t\\tGeographical WGS84 coordinate of the location\\nhourly\\tString array\\tNo\\t\\tA list of weather variables which shou'\n\n\nUnder the hood, we do two things:\n\napi_request_chain: Generate an API URL based on the input question and the api_docs\napi_answer_chain: generate a final answer based on the API response\n\nWe can look at the LangSmith trace to inspect this:\n\nThe api_request_chain produces the API url from our question and the API documentation:\n\nHere we make the API request with the API url.\nThe api_answer_chain takes the response from the API and provides us with a natural language response:\n\nGoing deeper​\n\nTest with other APIs\n\nimport os\n\nos.environ[\"TMDB_BEARER_TOKEN\"] = \"\"\nfrom langchain.chains.api import tmdb_docs\n\nheaders = {\"Authorization\": f\"Bearer {os.environ['TMDB_BEARER_TOKEN']}\"}\nchain = APIChain.from_llm_and_api_docs(\n    llm,\n    tmdb_docs.TMDB_DOCS,\n    headers=headers,\n    verbose=True,\n    limit_to_domains=[\"https://api.themoviedb.org/\"],\n)\nchain.run(\"Search for 'Avatar'\")\n\nimport os\n\nfrom langchain.chains import APIChain\nfrom langchain.chains.api import podcast_docs\nfrom langchain.llms import OpenAI\n\nlisten_api_key = \"xxx\"  # Get api key here: https://www.listennotes.com/api/pricing/\nllm = OpenAI(temperature=0)\nheaders = {\"X-ListenAPI-Key\": listen_api_key}\nchain = APIChain.from_llm_and_api_docs(\n    llm,\n    podcast_docs.PODCAST_DOCS,\n    headers=headers,\n    verbose=True,\n    limit_to_domains=[\"https://listen-api.listennotes.com/\"],\n)\nchain.run(\n    \"Search for 'silicon valley bank' podcast episodes, audio length is more than 30 minutes, return only 1 results\"\n)\n\n\nWeb requests\n\nURL requests are such a common use-case that we have the LLMRequestsChain, which makes an HTTP GET request.\n\nfrom langchain.chains import LLMChain, LLMRequestsChain\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\n\ntemplate = \"\"\"Between >>> and <<< are the raw search result text from google.\nExtract the answer to the question '{query}' or say \"not found\" if the information is not contained.\nUse the format\nExtracted:<answer or \"not found\">\n>>> {requests_result} <<<\nExtracted:\"\"\"\n\nPROMPT = PromptTemplate(\n    input_variables=[\"query\", \"requests_result\"],\n    template=template,\n)\n\nchain = LLMRequestsChain(llm_chain=LLMChain(llm=OpenAI(temperature=0), prompt=PROMPT))\nquestion = \"What are the Three (3) biggest countries, and their respective sizes?\"\ninputs = {\n    \"query\": question,\n    \"url\": \"https://www.google.com/search?q=\" + question.replace(\" \", \"+\"),\n}\nchain(inputs)\n\n{'query': 'What are the Three (3) biggest countries, and their respective sizes?',\n 'url': 'https://www.google.com/search?q=What+are+the+Three+(3)+biggest+countries,+and+their+respective+sizes?',\n 'output': ' Russia (17,098,242 km²), Canada (9,984,670 km²), China (9,706,961 km²)'}\n\nPrevious\nRAG using local models\nNext\nChatbots\nUse case\nOverview\nQuickstart\nFunctions\nAPI Chain\nGoing deeper\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nCopyright © 2023 LangChain, Inc."
}