{
	"title": "How to | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/expression_language/how_to/",
	"html": "Skip to main content\n🦜️🔗 LangChain\nDocs\nUse cases\nIntegrations\nGuides\nAPI\nMore\n🦜️🔗\nChat\nSearch\n⌘\nK\nGet started\nIntroduction\nInstallation\nQuickstart\nSecurity\nLangChain Expression Language\nGet started\nWhy use LCEL\nInterface\nHow to\nRunnableParallel: Manipulating data\nRunnablePassthrough: Passing data through\nRunnableLambda: Run Custom Functions\nRunnableBranch: Dynamically route logic based on input\nBind runtime args\nConfigure chain internals at runtime\nAdd fallbacks\nStream custom generator functions\nAdd message history (memory)\nCookbook\nModules\nModel I/O\nRetrieval\nAgents\nMore\nLangServe\nLangSmith\nLangChain Expression LanguageHow to\nHow to\n📄️ RunnableParallel: Manipulating data\n\nmanipulating-inputs-output}\n\n📄️ RunnablePassthrough: Passing data through\n\npassing-data-through}\n\n📄️ RunnableLambda: Run Custom Functions\n\nrun-custom-functions}\n\n📄️ RunnableBranch: Dynamically route logic based on input\n\ndynamically-route-logic-based-on-input}\n\n📄️ Bind runtime args\n\nSometimes we want to invoke a Runnable within a Runnable sequence with\n\n📄️ Configure chain internals at runtime\n\nOftentimes you may want to experiment with, or even expose to the end\n\n📄️ Add fallbacks\n\nThere are many possible points of failure in an LLM application, whether\n\n📄️ Stream custom generator functions\n\nYou can use generator functions (ie. functions that use the yield\n\n📄️ Add message history (memory)\n\nThe RunnableWithMessageHistory let’s us add message history to certain\n\nPrevious\nInterface\nNext\nRunnableParallel: Manipulating data\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nCopyright © 2023 LangChain, Inc."
}