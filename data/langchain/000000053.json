{
	"title": "Chat models | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/chat/",
	"html": "Skip to main content\n🦜️🔗 LangChain\nDocs\nUse cases\nIntegrations\nGuides\nAPI\nMore\n🦜️🔗\nChat\nSearch\n⌘\nK\nProviders\nAnthropic\nAWS\nGoogle\nHugging Face\nMicrosoft\nOpenAI\nMore\nComponents\nLLMs\nChat models\nAnthropic\nAnthropic Functions\nAnyscale\nAzure OpenAI\nAzure ML Endpoint\nBaichuan Chat\nBaidu Qianfan\nBedrock Chat\nCohere\nErnie Bot Chat\nEverlyAI\nFireworks\nGigaChat\nGoogle Cloud Vertex AI\nTencent Hunyuan\nJinaChat\nKonko\nLiteLLM\nLlama 2 Chat\nLlama API\nMiniMax\nOllama\nOllama Functions\nOpenAI\nAliCloud PAI EAS\nPromptLayer ChatOpenAI\nTongyi Qwen\nvLLM Chat\nVolc Enging Maas\nYandexGPT\nDocument loaders\nDocument transformers\nText embedding models\nVector stores\nRetrievers\nTools\nAgents and toolkits\nMemory\nCallbacks\nChat loaders\nAdapters\nStores\nComponentsChat models\nChat models\nFeatures (natively supported)​\n\nAll ChatModels implement the Runnable interface, which comes with default implementations of all methods, ie. ainvoke, batch, abatch, stream, astream. This gives all ChatModels basic support for async, streaming and batch, which by default is implemented as below:\n\nAsync support defaults to calling the respective sync method in asyncio's default thread pool executor. This lets other async functions in your application make progress while the ChatModel is being executed, by moving this call to a background thread.\nStreaming support defaults to returning an Iterator (or AsyncIterator in the case of async streaming) of a single value, the final result returned by the underlying ChatModel provider. This obviously doesn't give you token-by-token streaming, which requires native support from the ChatModel provider, but ensures your code that expects an iterator of tokens can work for any of our ChatModel integrations.\nBatch support defaults to calling the underlying ChatModel in parallel for each input by making use of a thread pool executor (in the sync batch case) or asyncio.gather (in the async batch case). The concurrency can be controlled with the max_concurrency key in RunnableConfig.\n\nEach ChatModel integration can optionally provide native implementations to truly enable async or streaming. The table shows, for each integration, which features have been implemented with native support.\n\nModel\tInvoke\tAsync invoke\tStream\tAsync stream\nAzureChatOpenAI\t✅\t✅\t✅\t✅\nBedrockChat\t✅\t❌\t✅\t❌\nChatAnthropic\t✅\t✅\t✅\t✅\nChatAnyscale\t✅\t✅\t✅\t✅\nChatBaichuan\t✅\t❌\t✅\t❌\nChatCohere\t✅\t✅\t✅\t✅\nChatDatabricks\t✅\t✅\t❌\t❌\nChatEverlyAI\t✅\t✅\t✅\t✅\nChatFireworks\t✅\t✅\t✅\t✅\nChatGooglePalm\t✅\t✅\t❌\t❌\nChatHunyuan\t✅\t❌\t✅\t❌\nChatJavelinAIGateway\t✅\t✅\t❌\t❌\nChatKonko\t✅\t❌\t❌\t❌\nChatLiteLLM\t✅\t✅\t✅\t✅\nChatMLflowAIGateway\t✅\t❌\t❌\t❌\nChatMlflow\t✅\t✅\t❌\t❌\nChatOllama\t✅\t❌\t✅\t❌\nChatOpenAI\t✅\t✅\t✅\t✅\nChatVertexAI\t✅\t✅\t✅\t❌\nChatYandexGPT\t✅\t✅\t❌\t❌\nErnieBotChat\t✅\t❌\t❌\t❌\nGigaChat\t✅\t✅\t✅\t✅\nJinaChat\t✅\t✅\t✅\t✅\nMiniMaxChat\t✅\t✅\t❌\t❌\nPaiEasChatEndpoint\t✅\t✅\t❌\t✅\nPromptLayerChatOpenAI\t✅\t❌\t❌\t❌\nQianfanChatEndpoint\t✅\t✅\t✅\t✅\nVolcEngineMaasChat\t✅\t❌\t✅\t❌\nPrevious\nYandexGPT\nNext\nChat models\nFeatures (natively supported)\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nCopyright © 2023 LangChain, Inc."
}