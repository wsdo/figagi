{
	"title": "Pandas Dataframe | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/toolkits/pandas",
	"html": "Skip to main content\n🦜️🔗 LangChain\nDocs\nUse cases\nIntegrations\nGuides\nAPI\nMore\n🦜️🔗\nChat\nSearch\n⌘\nK\nProviders\nAnthropic\nAWS\nGoogle\nHugging Face\nMicrosoft\nOpenAI\nMore\nComponents\nLLMs\nChat models\nDocument loaders\nDocument transformers\nText embedding models\nVector stores\nRetrievers\nTools\nAgents and toolkits\nAINetwork\nAirbyte Question Answering\nAmadeus\nAzure Cognitive Services\nClickUp\nCSV\nDocument Comparison\nGithub\nGitlab\nGmail\nGoogle Drive tool\nJira\nJSON\nMultiOn\nNASA\nOffice365\nOpenAPI\nNatural Language APIs\nPandas Dataframe\nPlayWright Browser\nPowerBI Dataset\nPython\nSlack\nSpark Dataframe\nSpark SQL\nSQL Database\nSteam Game Recommendation & Game Details Tool\nXorbits\nMemory\nCallbacks\nChat loaders\nAdapters\nStores\nComponentsAgents and toolkitsPandas Dataframe\nPandas Dataframe\n\nThis notebook shows how to use agents to interact with a Pandas DataFrame. It is mostly optimized for question answering.\n\nNOTE: this agent calls the Python agent under the hood, which executes LLM generated Python code - this can be bad if the LLM generated Python code is harmful. Use cautiously.\n\nfrom langchain.agents.agent_types import AgentType\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain_experimental.agents.agent_toolkits import create_pandas_dataframe_agent\n\nimport pandas as pd\nfrom langchain.llms import OpenAI\n\ndf = pd.read_csv(\"titanic.csv\")\n\nUsing ZERO_SHOT_REACT_DESCRIPTION​\n\nThis shows how to initialize the agent using the ZERO_SHOT_REACT_DESCRIPTION agent type. Note that this is an alternative to the above.\n\nagent = create_pandas_dataframe_agent(OpenAI(temperature=0), df, verbose=True)\n\nUsing OpenAI Functions​\n\nThis shows how to initialize the agent using the OPENAI_FUNCTIONS agent type. Note that this is an alternative to the above.\n\nagent = create_pandas_dataframe_agent(\n    ChatOpenAI(temperature=0, model=\"gpt-3.5-turbo-0613\"),\n    df,\n    verbose=True,\n    agent_type=AgentType.OPENAI_FUNCTIONS,\n)\n\nagent.run(\"how many rows are there?\")\n\n\n\n> Entering new  chain...\n\nInvoking: `python_repl_ast` with `df.shape[0]`\n\n\n891There are 891 rows in the dataframe.\n\n> Finished chain.\n\n'There are 891 rows in the dataframe.'\n\nagent.run(\"how many people have more than 3 siblings\")\n\n\n\n> Entering new AgentExecutor chain...\nThought: I need to count the number of people with more than 3 siblings\nAction: python_repl_ast\nAction Input: df[df['SibSp'] > 3].shape[0]\nObservation: 30\nThought: I now know the final answer\nFinal Answer: 30 people have more than 3 siblings.\n\n> Finished chain.\n\n'30 people have more than 3 siblings.'\n\nagent.run(\"whats the square root of the average age?\")\n\n\n\n> Entering new AgentExecutor chain...\nThought: I need to calculate the average age first\nAction: python_repl_ast\nAction Input: df['Age'].mean()\nObservation: 29.69911764705882\nThought: I now need to calculate the square root of the average age\nAction: python_repl_ast\nAction Input: math.sqrt(df['Age'].mean())\nObservation: NameError(\"name 'math' is not defined\")\nThought: I need to import the math library\nAction: python_repl_ast\nAction Input: import math\nObservation: \nThought: I now need to calculate the square root of the average age\nAction: python_repl_ast\nAction Input: math.sqrt(df['Age'].mean())\nObservation: 5.449689683556195\nThought: I now know the final answer\nFinal Answer: The square root of the average age is 5.449689683556195.\n\n> Finished chain.\n\n'The square root of the average age is 5.449689683556195.'\n\nMulti DataFrame Example​\n\nThis next part shows how the agent can interact with multiple dataframes passed in as a list.\n\ndf1 = df.copy()\ndf1[\"Age\"] = df1[\"Age\"].fillna(df1[\"Age\"].mean())\n\nagent = create_pandas_dataframe_agent(OpenAI(temperature=0), [df, df1], verbose=True)\nagent.run(\"how many rows in the age column are different?\")\n\n\n\n> Entering new AgentExecutor chain...\nThought: I need to compare the age columns in both dataframes\nAction: python_repl_ast\nAction Input: len(df1[df1['Age'] != df2['Age']])\nObservation: 177\nThought: I now know the final answer\nFinal Answer: 177 rows in the age column are different.\n\n> Finished chain.\n\n'177 rows in the age column are different.'\n\nPrevious\nNatural Language APIs\nNext\nPlayWright Browser\nUsing ZERO_SHOT_REACT_DESCRIPTION\nUsing OpenAI Functions\nMulti DataFrame Example\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nCopyright © 2023 LangChain, Inc."
}