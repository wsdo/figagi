{
	"title": "Contributing to LangChain | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/contributing",
	"html": "Skip to main content\nü¶úÔ∏èüîó LangChain\nDocs\nUse cases\nIntegrations\nGuides\nAPI\nMore\nü¶úÔ∏èüîó\nChat\nSearch\n‚åò\nK\nContributing to LangChain\n\nHi there! Thank you for even being interested in contributing to LangChain. As an open-source project in a rapidly developing field, we are extremely open to contributions, whether they involve new features, improved infrastructure, better documentation, or bug fixes.\n\nüó∫Ô∏è Guidelines‚Äã\nüë©‚Äçüíª Contributing Code‚Äã\n\nTo contribute to this project, please follow the \"fork and pull request\" workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\nPlease follow the checked-in pull request template when opening pull requests. Note related issues and tag relevant maintainers.\n\nPull requests cannot land without passing the formatting, linting, and testing checks first. See Testing and Formatting and Linting for how to run these checks locally.\n\nIt's essential that we maintain great documentation and testing. If you:\n\nFix a bug\nAdd a relevant unit or integration test when possible. These live in tests/unit_tests and tests/integration_tests.\nMake an improvement\nUpdate any affected example notebooks and documentation. These live in docs.\nUpdate unit and integration tests when relevant.\nAdd a feature\nAdd a demo notebook in docs/docs/.\nAdd unit and integration tests.\n\nWe are a small, progress-oriented team. If there's something you'd like to add or change, opening a pull request is the best way to get our attention.\n\nüö©GitHub Issues‚Äã\n\nOur issues page is kept up to date with bugs, improvements, and feature requests.\n\nThere is a taxonomy of labels to help with sorting and discovery of issues of interest. Please use these to help organize issues.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single, modular bug/improvement/feature. If two issues are related, or blocking, please link them rather than combining them.\n\nWe will try to keep these issues as up-to-date as possible, though with the rapid rate of development in this field some may get out of date. If you notice this happening, please let us know.\n\nüôãGetting Help‚Äã\n\nOur goal is to have the simplest developer setup possible. Should you experience any difficulty getting setup, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\nüöÄ Quick Start‚Äã\n\nThis quick start guide explains how to run the repository locally. For a development container, see the .devcontainer folder.\n\nDependency Management: Poetry and other env/dependency managers‚Äã\n\nThis project utilizes Poetry v1.6.1+ as a dependency manager.\n\n‚ùóNote: Before installing Poetry, if you use Conda, create and activate a new Conda env (e.g. conda create -n langchain python=3.9)\n\nInstall Poetry: documentation on how to install it.\n\n‚ùóNote: If you use Conda or Pyenv as your environment/package manager, after installing Poetry, tell Poetry to use the virtualenv python environment (poetry config virtualenvs.prefer-active-python true)\n\nCore vs. Experimental‚Äã\n\nThis repository contains three separate projects:\n\nlangchain: core langchain code, abstractions, and use cases.\nlangchain_core: contain interfaces for key abstractions as well as logic for combining them in chains (LCEL).\nlangchain_experimental: see the Experimental README for more information.\n\nEach of these has its own development environment. Docs are run from the top-level makefile, but development is split across separate test & release flows.\n\nFor this quickstart, start with langchain core:\n\ncd libs/langchain\n\nLocal Development Dependencies‚Äã\n\nInstall langchain development requirements (for running langchain, running examples, linting, formatting, tests, and coverage):\n\npoetry install --with test\n\n\nThen verify dependency installation:\n\nmake test\n\n\nIf the tests don't pass, you may need to pip install additional dependencies, such as numexpr and openapi_schema_pydantic.\n\nIf during installation you receive a WheelFileValidationError for debugpy, please make sure you are running Poetry v1.6.1+. This bug was present in older versions of Poetry (e.g. 1.4.1) and has been resolved in newer releases. If you are still seeing this bug on v1.6.1, you may also try disabling \"modern installation\" (poetry config installer.modern-installation false) and re-installing requirements. See this debugpy issue for more details.\n\nTesting‚Äã\n\nsome test dependencies are optional; see section about optional dependencies.\n\nUnit tests cover modular logic that does not require calls to outside APIs. If you add new logic, please add a unit test.\n\nTo run unit tests:\n\nmake test\n\n\nTo run unit tests in Docker:\n\nmake docker_tests\n\n\nThere are also integration tests and code-coverage available.\n\nOnly develop langchain_core or langchain_experimental‚Äã\n\nIf you are only developing langchain_core or langchain_experimental, you can simply install the dependencies for the respective projects and run tests:\n\ncd libs/core\npoetry install --with test\nmake test\n\n\nOr:\n\ncd libs/experimental\npoetry install --with test\nmake test\n\nFormatting and Linting‚Äã\n\nRun these locally before submitting a PR; the CI system will check also.\n\nCode Formatting‚Äã\n\nFormatting for this project is done via ruff.\n\nTo run formatting for docs, cookbook and templates:\n\nmake format\n\n\nTo run formatting for a library, run the same command from the relevant library directory:\n\ncd libs/{LIBRARY}\nmake format\n\n\nAdditionally, you can run the formatter only on the files that have been modified in your current branch as compared to the master branch using the format_diff command:\n\nmake format_diff\n\n\nThis is especially useful when you have made changes to a subset of the project and want to ensure your changes are properly formatted without affecting the rest of the codebase.\n\nLinting‚Äã\n\nLinting for this project is done via a combination of ruff and mypy.\n\nTo run linting for docs, cookbook and templates:\n\nmake lint\n\n\nTo run linting for a library, run the same command from the relevant library directory:\n\ncd libs/{LIBRARY}\nmake lint\n\n\nIn addition, you can run the linter only on the files that have been modified in your current branch as compared to the master branch using the lint_diff command:\n\nmake lint_diff\n\n\nThis can be very helpful when you've made changes to only certain parts of the project and want to ensure your changes meet the linting standards without having to check the entire codebase.\n\nWe recognize linting can be annoying - if you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nSpellcheck‚Äã\n\nSpellchecking for this project is done via codespell. Note that codespell finds common typos, so it could have false-positive (correctly spelled but rarely used) and false-negatives (not finding misspelled) words.\n\nTo check spelling for this project:\n\nmake spell_check\n\n\nTo fix spelling in place:\n\nmake spell_fix\n\n\nIf codespell is incorrectly flagging a word, you can skip spellcheck for that word by adding it to the codespell config in the pyproject.toml file.\n\n[tool.codespell]\n...\n# Add here:\nignore-words-list = 'momento,collison,ned,foor,reworkd,parth,whats,aapply,mysogyny,unsecure'\n\nWorking with Optional Dependencies‚Äã\n\nLangchain relies heavily on optional dependencies to keep the Langchain package lightweight.\n\nYou only need to add a new dependency if a unit test relies on the package. If your package is only required for integration tests, then you can skip these steps and leave all pyproject.toml and poetry.lock files alone.\n\nIf you're adding a new dependency to Langchain, assume that it will be an optional dependency, and that most users won't have it installed.\n\nUsers who do not have the dependency installed should be able to import your code without any side effects (no warnings, no errors, no exceptions).\n\nTo introduce the dependency to the pyproject.toml file correctly, please do the following:\n\nAdd the dependency to the main group as an optional dependency\npoetry add --optional [package_name]\n\nOpen pyproject.toml and add the dependency to the extended_testing extra\nRelock the poetry file to update the extra.\npoetry lock --no-update\n\nAdd a unit test that the very least attempts to import the new code. Ideally, the unit test makes use of lightweight fixtures to test the logic of the code.\nPlease use the @pytest.mark.requires(package_name) decorator for any tests that require the dependency.\nAdding a Jupyter Notebook‚Äã\n\nIf you are adding a Jupyter Notebook example, you'll want to install the optional dev dependencies.\n\nTo install dev dependencies:\n\npoetry install --with dev\n\n\nLaunch a notebook:\n\npoetry run jupyter notebook\n\n\nWhen you run poetry install, the langchain package is installed as editable in the virtualenv, so your new logic can be imported into the notebook.\n\nDocumentation‚Äã\n\nWhile the code is split between langchain and langchain.experimental, the documentation is one holistic thing. This covers how to get started contributing to documentation.\n\nFrom the top-level of this repo, install documentation dependencies:\n\npoetry install\n\nContribute Documentation‚Äã\n\nThe docs directory contains Documentation and API Reference.\n\nDocumentation is built using Docusaurus 2.\n\nAPI Reference are largely autogenerated by sphinx from the code. For that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nBuild Documentation Locally‚Äã\n\nIn the following commands, the prefix api_ indicates that those are operations for the API Reference.\n\nBefore building the documentation, it is always a good idea to clean the build directory:\n\nmake docs_clean\nmake api_docs_clean\n\n\nNext, you can build the documentation as outlined below:\n\nmake docs_build\nmake api_docs_build\n\n\nFinally, run the link checker to ensure all links are valid:\n\nmake docs_linkcheck\nmake api_docs_linkcheck\n\nVerify Documentation changes‚Äã\n\nAfter pushing documentation changes to the repository, you can preview and verify that the changes are what you wanted by clicking the View deployment or Visit Preview buttons on the pull request Conversation page. This will take you to a preview of the documentation changes. This preview is created by Vercel.\n\nüè≠ Release Process‚Äã\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency by a developer and published to PyPI.\n\nLangChain follows the semver versioning standard. However, as pre-1.0 software, even patch releases may contain non-backwards-compatible changes.\n\nüåü Recognition‚Äã\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or through another means.\n\nüó∫Ô∏è Guidelines\nüë©‚Äçüíª Contributing Code\nüö©GitHub Issues\nüôãGetting Help\nüöÄ Quick Start\nDependency Management: Poetry and other env/dependency managers\nCore vs. Experimental\nLocal Development Dependencies\nTesting\nOnly develop langchain_core or langchain_experimental\nFormatting and Linting\nWorking with Optional Dependencies\nAdding a Jupyter Notebook\nDocumentation\nContribute Documentation\nBuild Documentation Locally\nVerify Documentation changes\nüè≠ Release Process\nüåü Recognition\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nCopyright ¬© 2023 LangChain, Inc."
}