{
	"title": "CSV | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/toolkits/csv",
	"html": "Skip to main content\n🦜️🔗 LangChain\nDocs\nUse cases\nIntegrations\nGuides\nAPI\nMore\n🦜️🔗\nChat\nSearch\n⌘\nK\nProviders\nAnthropic\nAWS\nGoogle\nHugging Face\nMicrosoft\nOpenAI\nMore\nComponents\nLLMs\nChat models\nDocument loaders\nDocument transformers\nText embedding models\nVector stores\nRetrievers\nTools\nAgents and toolkits\nAINetwork\nAirbyte Question Answering\nAmadeus\nAzure Cognitive Services\nClickUp\nCSV\nDocument Comparison\nGithub\nGitlab\nGmail\nGoogle Drive tool\nJira\nJSON\nMultiOn\nNASA\nOffice365\nOpenAPI\nNatural Language APIs\nPandas Dataframe\nPlayWright Browser\nPowerBI Dataset\nPython\nSlack\nSpark Dataframe\nSpark SQL\nSQL Database\nSteam Game Recommendation & Game Details Tool\nXorbits\nMemory\nCallbacks\nChat loaders\nAdapters\nStores\nComponentsAgents and toolkitsCSV\nCSV\n\nThis notebook shows how to use agents to interact with data in CSV format. It is mostly optimized for question answering.\n\nNOTE: this agent calls the Pandas DataFrame agent under the hood, which in turn calls the Python agent, which executes LLM generated Python code - this can be bad if the LLM generated Python code is harmful. Use cautiously.\n\nfrom langchain.agents.agent_types import AgentType\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.llms import OpenAI\nfrom langchain_experimental.agents.agent_toolkits import create_csv_agent\n\nUsing ZERO_SHOT_REACT_DESCRIPTION​\n\nThis shows how to initialize the agent using the ZERO_SHOT_REACT_DESCRIPTION agent type.\n\nagent = create_csv_agent(\n    OpenAI(temperature=0),\n    \"titanic.csv\",\n    verbose=True,\n    agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n)\n\nUsing OpenAI Functions​\n\nThis shows how to initialize the agent using the OPENAI_FUNCTIONS agent type. Note that this is an alternative to the above.\n\nagent = create_csv_agent(\n    ChatOpenAI(temperature=0, model=\"gpt-3.5-turbo-0613\"),\n    \"titanic.csv\",\n    verbose=True,\n    agent_type=AgentType.OPENAI_FUNCTIONS,\n)\n\nagent.run(\"how many rows are there?\")\n\nError in on_chain_start callback: 'name'\n\n\nInvoking: `python_repl_ast` with `df.shape[0]`\n\n\n891There are 891 rows in the dataframe.\n\n> Finished chain.\n\n'There are 891 rows in the dataframe.'\n\nagent.run(\"how many people have more than 3 siblings\")\n\nError in on_chain_start callback: 'name'\n\n\nInvoking: `python_repl_ast` with `df[df['SibSp'] > 3]['PassengerId'].count()`\n\n\n30There are 30 people in the dataframe who have more than 3 siblings.\n\n> Finished chain.\n\n'There are 30 people in the dataframe who have more than 3 siblings.'\n\nagent.run(\"whats the square root of the average age?\")\n\nError in on_chain_start callback: 'name'\n\n\nInvoking: `python_repl_ast` with `import pandas as pd\nimport math\n\n# Create a dataframe\ndata = {'Age': [22, 38, 26, 35, 35]}\ndf = pd.DataFrame(data)\n\n# Calculate the average age\naverage_age = df['Age'].mean()\n\n# Calculate the square root of the average age\nsquare_root = math.sqrt(average_age)\n\nsquare_root`\n\n\n5.585696017507576The square root of the average age is approximately 5.59.\n\n> Finished chain.\n\n'The square root of the average age is approximately 5.59.'\n\nMulti CSV Example​\n\nThis next part shows how the agent can interact with multiple csv files passed in as a list.\n\nagent = create_csv_agent(\n    ChatOpenAI(temperature=0, model=\"gpt-3.5-turbo-0613\"),\n    [\"titanic.csv\", \"titanic_age_fillna.csv\"],\n    verbose=True,\n    agent_type=AgentType.OPENAI_FUNCTIONS,\n)\nagent.run(\"how many rows in the age column are different between the two dfs?\")\n\nError in on_chain_start callback: 'name'\n\n\nInvoking: `python_repl_ast` with `df1['Age'].nunique() - df2['Age'].nunique()`\n\n\n-1There is 1 row in the age column that is different between the two dataframes.\n\n> Finished chain.\n\n'There is 1 row in the age column that is different between the two dataframes.'\n\nPrevious\nClickUp\nNext\nDocument Comparison\nUsing ZERO_SHOT_REACT_DESCRIPTION\nUsing OpenAI Functions\nMulti CSV Example\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nCopyright © 2023 LangChain, Inc."
}